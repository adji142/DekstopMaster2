//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3625
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace ISA.Finance.DataTemplates {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("dsBank")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class dsBank : global::System.Data.DataSet {
        
        private DataDataTable tableData;
        
        private Data2DataTable tableData2;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public dsBank() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected dsBank(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["Data"] != null)) {
                    base.Tables.Add(new DataDataTable(ds.Tables["Data"]));
                }
                if ((ds.Tables["Data2"] != null)) {
                    base.Tables.Add(new Data2DataTable(ds.Tables["Data2"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DataDataTable Data {
            get {
                return this.tableData;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Data2DataTable Data2 {
            get {
                return this.tableData2;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            dsBank cln = ((dsBank)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["Data"] != null)) {
                    base.Tables.Add(new DataDataTable(ds.Tables["Data"]));
                }
                if ((ds.Tables["Data2"] != null)) {
                    base.Tables.Add(new Data2DataTable(ds.Tables["Data2"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableData = ((DataDataTable)(base.Tables["Data"]));
            if ((initTable == true)) {
                if ((this.tableData != null)) {
                    this.tableData.InitVars();
                }
            }
            this.tableData2 = ((Data2DataTable)(base.Tables["Data2"]));
            if ((initTable == true)) {
                if ((this.tableData2 != null)) {
                    this.tableData2.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "dsBank";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/dsBank.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableData = new DataDataTable();
            base.Tables.Add(this.tableData);
            this.tableData2 = new Data2DataTable();
            base.Tables.Add(this.tableData2);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeData() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeData2() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            dsBank ds = new dsBank();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void DataRowChangeEventHandler(object sender, DataRowChangeEvent e);
        
        public delegate void Data2RowChangeEventHandler(object sender, Data2RowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class DataDataTable : global::System.Data.TypedTableBase<DataRow> {
            
            private global::System.Data.DataColumn columnflag1;
            
            private global::System.Data.DataColumn columnflag2;
            
            private global::System.Data.DataColumn columnuraian;
            
            private global::System.Data.DataColumn columnjml1;
            
            private global::System.Data.DataColumn columnjml2;
            
            private global::System.Data.DataColumn columnjml3;
            
            private global::System.Data.DataColumn columnpm;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataDataTable() {
                this.TableName = "Data";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DataDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected DataDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn flag1Column {
                get {
                    return this.columnflag1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn flag2Column {
                get {
                    return this.columnflag2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn uraianColumn {
                get {
                    return this.columnuraian;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn jml1Column {
                get {
                    return this.columnjml1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn jml2Column {
                get {
                    return this.columnjml2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn jml3Column {
                get {
                    return this.columnjml3;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn pmColumn {
                get {
                    return this.columnpm;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataRow this[int index] {
                get {
                    return ((DataRow)(this.Rows[index]));
                }
            }
            
            public event DataRowChangeEventHandler DataRowChanging;
            
            public event DataRowChangeEventHandler DataRowChanged;
            
            public event DataRowChangeEventHandler DataRowDeleting;
            
            public event DataRowChangeEventHandler DataRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddDataRow(DataRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataRow AddDataRow(string flag1, string flag2, string uraian, string jml1, string jml2, string jml3, string pm) {
                DataRow rowDataRow = ((DataRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        flag1,
                        flag2,
                        uraian,
                        jml1,
                        jml2,
                        jml3,
                        pm};
                rowDataRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowDataRow);
                return rowDataRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                DataDataTable cln = ((DataDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new DataDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnflag1 = base.Columns["flag1"];
                this.columnflag2 = base.Columns["flag2"];
                this.columnuraian = base.Columns["uraian"];
                this.columnjml1 = base.Columns["jml1"];
                this.columnjml2 = base.Columns["jml2"];
                this.columnjml3 = base.Columns["jml3"];
                this.columnpm = base.Columns["pm"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnflag1 = new global::System.Data.DataColumn("flag1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnflag1);
                this.columnflag2 = new global::System.Data.DataColumn("flag2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnflag2);
                this.columnuraian = new global::System.Data.DataColumn("uraian", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnuraian);
                this.columnjml1 = new global::System.Data.DataColumn("jml1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnjml1);
                this.columnjml2 = new global::System.Data.DataColumn("jml2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnjml2);
                this.columnjml3 = new global::System.Data.DataColumn("jml3", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnjml3);
                this.columnpm = new global::System.Data.DataColumn("pm", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpm);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataRow NewDataRow() {
                return ((DataRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new DataRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(DataRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DataRowChanged != null)) {
                    this.DataRowChanged(this, new DataRowChangeEvent(((DataRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DataRowChanging != null)) {
                    this.DataRowChanging(this, new DataRowChangeEvent(((DataRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DataRowDeleted != null)) {
                    this.DataRowDeleted(this, new DataRowChangeEvent(((DataRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DataRowDeleting != null)) {
                    this.DataRowDeleting(this, new DataRowChangeEvent(((DataRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveDataRow(DataRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dsBank ds = new dsBank();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DataDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class Data2DataTable : global::System.Data.TypedTableBase<Data2Row> {
            
            private global::System.Data.DataColumn columnflag1;
            
            private global::System.Data.DataColumn columnTglTran;
            
            private global::System.Data.DataColumn columnTglBank;
            
            private global::System.Data.DataColumn columnTglRK;
            
            private global::System.Data.DataColumn columnNoRef;
            
            private global::System.Data.DataColumn columnTrs;
            
            private global::System.Data.DataColumn columnNoBGC;
            
            private global::System.Data.DataColumn columnAsalGiro;
            
            private global::System.Data.DataColumn columnLokasi;
            
            private global::System.Data.DataColumn columnuraian;
            
            private global::System.Data.DataColumn columndebet;
            
            private global::System.Data.DataColumn columnkredit;
            
            private global::System.Data.DataColumn columnVTA;
            
            private global::System.Data.DataColumn columnSaldo;
            
            private global::System.Data.DataColumn columnRecordID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Data2DataTable() {
                this.TableName = "Data2";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Data2DataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected Data2DataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn flag1Column {
                get {
                    return this.columnflag1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TglTranColumn {
                get {
                    return this.columnTglTran;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TglBankColumn {
                get {
                    return this.columnTglBank;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TglRKColumn {
                get {
                    return this.columnTglRK;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NoRefColumn {
                get {
                    return this.columnNoRef;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TrsColumn {
                get {
                    return this.columnTrs;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NoBGCColumn {
                get {
                    return this.columnNoBGC;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AsalGiroColumn {
                get {
                    return this.columnAsalGiro;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LokasiColumn {
                get {
                    return this.columnLokasi;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn uraianColumn {
                get {
                    return this.columnuraian;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn debetColumn {
                get {
                    return this.columndebet;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn kreditColumn {
                get {
                    return this.columnkredit;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VTAColumn {
                get {
                    return this.columnVTA;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SaldoColumn {
                get {
                    return this.columnSaldo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RecordIDColumn {
                get {
                    return this.columnRecordID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Data2Row this[int index] {
                get {
                    return ((Data2Row)(this.Rows[index]));
                }
            }
            
            public event Data2RowChangeEventHandler Data2RowChanging;
            
            public event Data2RowChangeEventHandler Data2RowChanged;
            
            public event Data2RowChangeEventHandler Data2RowDeleting;
            
            public event Data2RowChangeEventHandler Data2RowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddData2Row(Data2Row row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Data2Row AddData2Row(string flag1, string TglTran, string TglBank, string TglRK, string NoRef, string Trs, string NoBGC, string AsalGiro, string Lokasi, string uraian, string debet, string kredit, string VTA, string Saldo, string RecordID) {
                Data2Row rowData2Row = ((Data2Row)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        flag1,
                        TglTran,
                        TglBank,
                        TglRK,
                        NoRef,
                        Trs,
                        NoBGC,
                        AsalGiro,
                        Lokasi,
                        uraian,
                        debet,
                        kredit,
                        VTA,
                        Saldo,
                        RecordID};
                rowData2Row.ItemArray = columnValuesArray;
                this.Rows.Add(rowData2Row);
                return rowData2Row;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                Data2DataTable cln = ((Data2DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new Data2DataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnflag1 = base.Columns["flag1"];
                this.columnTglTran = base.Columns["TglTran"];
                this.columnTglBank = base.Columns["TglBank"];
                this.columnTglRK = base.Columns["TglRK"];
                this.columnNoRef = base.Columns["NoRef"];
                this.columnTrs = base.Columns["Trs"];
                this.columnNoBGC = base.Columns["NoBGC"];
                this.columnAsalGiro = base.Columns["AsalGiro"];
                this.columnLokasi = base.Columns["Lokasi"];
                this.columnuraian = base.Columns["uraian"];
                this.columndebet = base.Columns["debet"];
                this.columnkredit = base.Columns["kredit"];
                this.columnVTA = base.Columns["VTA"];
                this.columnSaldo = base.Columns["Saldo"];
                this.columnRecordID = base.Columns["RecordID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnflag1 = new global::System.Data.DataColumn("flag1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnflag1);
                this.columnTglTran = new global::System.Data.DataColumn("TglTran", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTglTran);
                this.columnTglBank = new global::System.Data.DataColumn("TglBank", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTglBank);
                this.columnTglRK = new global::System.Data.DataColumn("TglRK", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTglRK);
                this.columnNoRef = new global::System.Data.DataColumn("NoRef", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNoRef);
                this.columnTrs = new global::System.Data.DataColumn("Trs", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTrs);
                this.columnNoBGC = new global::System.Data.DataColumn("NoBGC", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNoBGC);
                this.columnAsalGiro = new global::System.Data.DataColumn("AsalGiro", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAsalGiro);
                this.columnLokasi = new global::System.Data.DataColumn("Lokasi", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLokasi);
                this.columnuraian = new global::System.Data.DataColumn("uraian", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnuraian);
                this.columndebet = new global::System.Data.DataColumn("debet", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndebet);
                this.columnkredit = new global::System.Data.DataColumn("kredit", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnkredit);
                this.columnVTA = new global::System.Data.DataColumn("VTA", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVTA);
                this.columnSaldo = new global::System.Data.DataColumn("Saldo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSaldo);
                this.columnRecordID = new global::System.Data.DataColumn("RecordID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRecordID);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Data2Row NewData2Row() {
                return ((Data2Row)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new Data2Row(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(Data2Row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Data2RowChanged != null)) {
                    this.Data2RowChanged(this, new Data2RowChangeEvent(((Data2Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Data2RowChanging != null)) {
                    this.Data2RowChanging(this, new Data2RowChangeEvent(((Data2Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Data2RowDeleted != null)) {
                    this.Data2RowDeleted(this, new Data2RowChangeEvent(((Data2Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Data2RowDeleting != null)) {
                    this.Data2RowDeleting(this, new Data2RowChangeEvent(((Data2Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveData2Row(Data2Row row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dsBank ds = new dsBank();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Data2DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class DataRow : global::System.Data.DataRow {
            
            private DataDataTable tableData;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DataRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableData = ((DataDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string flag1 {
                get {
                    try {
                        return ((string)(this[this.tableData.flag1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'flag1\' in table \'Data\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableData.flag1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string flag2 {
                get {
                    try {
                        return ((string)(this[this.tableData.flag2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'flag2\' in table \'Data\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableData.flag2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string uraian {
                get {
                    try {
                        return ((string)(this[this.tableData.uraianColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'uraian\' in table \'Data\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableData.uraianColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string jml1 {
                get {
                    try {
                        return ((string)(this[this.tableData.jml1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'jml1\' in table \'Data\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableData.jml1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string jml2 {
                get {
                    try {
                        return ((string)(this[this.tableData.jml2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'jml2\' in table \'Data\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableData.jml2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string jml3 {
                get {
                    try {
                        return ((string)(this[this.tableData.jml3Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'jml3\' in table \'Data\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableData.jml3Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string pm {
                get {
                    try {
                        return ((string)(this[this.tableData.pmColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'pm\' in table \'Data\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableData.pmColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isflag1Null() {
                return this.IsNull(this.tableData.flag1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setflag1Null() {
                this[this.tableData.flag1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isflag2Null() {
                return this.IsNull(this.tableData.flag2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setflag2Null() {
                this[this.tableData.flag2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsuraianNull() {
                return this.IsNull(this.tableData.uraianColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SeturaianNull() {
                this[this.tableData.uraianColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isjml1Null() {
                return this.IsNull(this.tableData.jml1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setjml1Null() {
                this[this.tableData.jml1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isjml2Null() {
                return this.IsNull(this.tableData.jml2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setjml2Null() {
                this[this.tableData.jml2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isjml3Null() {
                return this.IsNull(this.tableData.jml3Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setjml3Null() {
                this[this.tableData.jml3Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IspmNull() {
                return this.IsNull(this.tableData.pmColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetpmNull() {
                this[this.tableData.pmColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class Data2Row : global::System.Data.DataRow {
            
            private Data2DataTable tableData2;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Data2Row(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableData2 = ((Data2DataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string flag1 {
                get {
                    try {
                        return ((string)(this[this.tableData2.flag1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'flag1\' in table \'Data2\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableData2.flag1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TglTran {
                get {
                    try {
                        return ((string)(this[this.tableData2.TglTranColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TglTran\' in table \'Data2\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableData2.TglTranColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TglBank {
                get {
                    try {
                        return ((string)(this[this.tableData2.TglBankColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TglBank\' in table \'Data2\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableData2.TglBankColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TglRK {
                get {
                    try {
                        return ((string)(this[this.tableData2.TglRKColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TglRK\' in table \'Data2\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableData2.TglRKColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NoRef {
                get {
                    try {
                        return ((string)(this[this.tableData2.NoRefColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NoRef\' in table \'Data2\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableData2.NoRefColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Trs {
                get {
                    try {
                        return ((string)(this[this.tableData2.TrsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Trs\' in table \'Data2\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableData2.TrsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NoBGC {
                get {
                    try {
                        return ((string)(this[this.tableData2.NoBGCColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NoBGC\' in table \'Data2\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableData2.NoBGCColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AsalGiro {
                get {
                    try {
                        return ((string)(this[this.tableData2.AsalGiroColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AsalGiro\' in table \'Data2\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableData2.AsalGiroColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Lokasi {
                get {
                    try {
                        return ((string)(this[this.tableData2.LokasiColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Lokasi\' in table \'Data2\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableData2.LokasiColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string uraian {
                get {
                    try {
                        return ((string)(this[this.tableData2.uraianColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'uraian\' in table \'Data2\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableData2.uraianColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string debet {
                get {
                    try {
                        return ((string)(this[this.tableData2.debetColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'debet\' in table \'Data2\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableData2.debetColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string kredit {
                get {
                    try {
                        return ((string)(this[this.tableData2.kreditColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'kredit\' in table \'Data2\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableData2.kreditColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string VTA {
                get {
                    try {
                        return ((string)(this[this.tableData2.VTAColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'VTA\' in table \'Data2\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableData2.VTAColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Saldo {
                get {
                    try {
                        return ((string)(this[this.tableData2.SaldoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Saldo\' in table \'Data2\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableData2.SaldoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RecordID {
                get {
                    try {
                        return ((string)(this[this.tableData2.RecordIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RecordID\' in table \'Data2\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableData2.RecordIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isflag1Null() {
                return this.IsNull(this.tableData2.flag1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setflag1Null() {
                this[this.tableData2.flag1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTglTranNull() {
                return this.IsNull(this.tableData2.TglTranColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTglTranNull() {
                this[this.tableData2.TglTranColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTglBankNull() {
                return this.IsNull(this.tableData2.TglBankColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTglBankNull() {
                this[this.tableData2.TglBankColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTglRKNull() {
                return this.IsNull(this.tableData2.TglRKColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTglRKNull() {
                this[this.tableData2.TglRKColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNoRefNull() {
                return this.IsNull(this.tableData2.NoRefColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNoRefNull() {
                this[this.tableData2.NoRefColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTrsNull() {
                return this.IsNull(this.tableData2.TrsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTrsNull() {
                this[this.tableData2.TrsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNoBGCNull() {
                return this.IsNull(this.tableData2.NoBGCColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNoBGCNull() {
                this[this.tableData2.NoBGCColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAsalGiroNull() {
                return this.IsNull(this.tableData2.AsalGiroColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAsalGiroNull() {
                this[this.tableData2.AsalGiroColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLokasiNull() {
                return this.IsNull(this.tableData2.LokasiColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLokasiNull() {
                this[this.tableData2.LokasiColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsuraianNull() {
                return this.IsNull(this.tableData2.uraianColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SeturaianNull() {
                this[this.tableData2.uraianColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdebetNull() {
                return this.IsNull(this.tableData2.debetColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdebetNull() {
                this[this.tableData2.debetColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IskreditNull() {
                return this.IsNull(this.tableData2.kreditColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetkreditNull() {
                this[this.tableData2.kreditColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVTANull() {
                return this.IsNull(this.tableData2.VTAColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVTANull() {
                this[this.tableData2.VTAColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSaldoNull() {
                return this.IsNull(this.tableData2.SaldoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSaldoNull() {
                this[this.tableData2.SaldoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRecordIDNull() {
                return this.IsNull(this.tableData2.RecordIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRecordIDNull() {
                this[this.tableData2.RecordIDColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class DataRowChangeEvent : global::System.EventArgs {
            
            private DataRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataRowChangeEvent(DataRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class Data2RowChangeEvent : global::System.EventArgs {
            
            private Data2Row eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Data2RowChangeEvent(Data2Row row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Data2Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591