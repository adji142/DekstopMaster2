//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3623
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace ISA.Finance.DataTemplates {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("dsToko")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class dsToko : global::System.Data.DataSet {
        
        private TokoDataTable tableToko;
        
        private KLPDataTable tableKLP;
        
        private PiutangDataTable tablePiutang;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public dsToko() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected dsToko(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["Toko"] != null)) {
                    base.Tables.Add(new TokoDataTable(ds.Tables["Toko"]));
                }
                if ((ds.Tables["KLP"] != null)) {
                    base.Tables.Add(new KLPDataTable(ds.Tables["KLP"]));
                }
                if ((ds.Tables["Piutang"] != null)) {
                    base.Tables.Add(new PiutangDataTable(ds.Tables["Piutang"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TokoDataTable Toko {
            get {
                return this.tableToko;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public KLPDataTable KLP {
            get {
                return this.tableKLP;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PiutangDataTable Piutang {
            get {
                return this.tablePiutang;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            dsToko cln = ((dsToko)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["Toko"] != null)) {
                    base.Tables.Add(new TokoDataTable(ds.Tables["Toko"]));
                }
                if ((ds.Tables["KLP"] != null)) {
                    base.Tables.Add(new KLPDataTable(ds.Tables["KLP"]));
                }
                if ((ds.Tables["Piutang"] != null)) {
                    base.Tables.Add(new PiutangDataTable(ds.Tables["Piutang"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableToko = ((TokoDataTable)(base.Tables["Toko"]));
            if ((initTable == true)) {
                if ((this.tableToko != null)) {
                    this.tableToko.InitVars();
                }
            }
            this.tableKLP = ((KLPDataTable)(base.Tables["KLP"]));
            if ((initTable == true)) {
                if ((this.tableKLP != null)) {
                    this.tableKLP.InitVars();
                }
            }
            this.tablePiutang = ((PiutangDataTable)(base.Tables["Piutang"]));
            if ((initTable == true)) {
                if ((this.tablePiutang != null)) {
                    this.tablePiutang.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "dsToko";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/dsToko.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableToko = new TokoDataTable();
            base.Tables.Add(this.tableToko);
            this.tableKLP = new KLPDataTable();
            base.Tables.Add(this.tableKLP);
            this.tablePiutang = new PiutangDataTable();
            base.Tables.Add(this.tablePiutang);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeToko() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeKLP() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializePiutang() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            dsToko ds = new dsToko();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void TokoRowChangeEventHandler(object sender, TokoRowChangeEvent e);
        
        public delegate void KLPRowChangeEventHandler(object sender, KLPRowChangeEvent e);
        
        public delegate void PiutangRowChangeEventHandler(object sender, PiutangRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TokoDataTable : global::System.Data.TypedTableBase<TokoRow> {
            
            private global::System.Data.DataColumn columnKodeToko;
            
            private global::System.Data.DataColumn columnNamaToko;
            
            private global::System.Data.DataColumn columnWilID;
            
            private global::System.Data.DataColumn columnKota;
            
            private global::System.Data.DataColumn columnDaerah;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TokoDataTable() {
                this.TableName = "Toko";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TokoDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TokoDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn KodeTokoColumn {
                get {
                    return this.columnKodeToko;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NamaTokoColumn {
                get {
                    return this.columnNamaToko;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WilIDColumn {
                get {
                    return this.columnWilID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn KotaColumn {
                get {
                    return this.columnKota;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DaerahColumn {
                get {
                    return this.columnDaerah;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TokoRow this[int index] {
                get {
                    return ((TokoRow)(this.Rows[index]));
                }
            }
            
            public event TokoRowChangeEventHandler TokoRowChanging;
            
            public event TokoRowChangeEventHandler TokoRowChanged;
            
            public event TokoRowChangeEventHandler TokoRowDeleting;
            
            public event TokoRowChangeEventHandler TokoRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTokoRow(TokoRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TokoRow AddTokoRow(string KodeToko, string NamaToko, string WilID, string Kota, string Daerah) {
                TokoRow rowTokoRow = ((TokoRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        KodeToko,
                        NamaToko,
                        WilID,
                        Kota,
                        Daerah};
                rowTokoRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTokoRow);
                return rowTokoRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                TokoDataTable cln = ((TokoDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new TokoDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnKodeToko = base.Columns["KodeToko"];
                this.columnNamaToko = base.Columns["NamaToko"];
                this.columnWilID = base.Columns["WilID"];
                this.columnKota = base.Columns["Kota"];
                this.columnDaerah = base.Columns["Daerah"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnKodeToko = new global::System.Data.DataColumn("KodeToko", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnKodeToko);
                this.columnNamaToko = new global::System.Data.DataColumn("NamaToko", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNamaToko);
                this.columnWilID = new global::System.Data.DataColumn("WilID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWilID);
                this.columnKota = new global::System.Data.DataColumn("Kota", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnKota);
                this.columnDaerah = new global::System.Data.DataColumn("Daerah", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDaerah);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TokoRow NewTokoRow() {
                return ((TokoRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new TokoRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(TokoRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TokoRowChanged != null)) {
                    this.TokoRowChanged(this, new TokoRowChangeEvent(((TokoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TokoRowChanging != null)) {
                    this.TokoRowChanging(this, new TokoRowChangeEvent(((TokoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TokoRowDeleted != null)) {
                    this.TokoRowDeleted(this, new TokoRowChangeEvent(((TokoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TokoRowDeleting != null)) {
                    this.TokoRowDeleting(this, new TokoRowChangeEvent(((TokoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTokoRow(TokoRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dsToko ds = new dsToko();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TokoDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class KLPDataTable : global::System.Data.TypedTableBase<KLPRow> {
            
            private global::System.Data.DataColumn columnBulan;
            
            private global::System.Data.DataColumn columnFB2;
            
            private global::System.Data.DataColumn _columnFB2_Omset;
            
            private global::System.Data.DataColumn _columnFB2_HPP;
            
            private global::System.Data.DataColumn columnFB4;
            
            private global::System.Data.DataColumn _columnFB4_Omset;
            
            private global::System.Data.DataColumn _columnFB4_HPP;
            
            private global::System.Data.DataColumn columnFE2;
            
            private global::System.Data.DataColumn _columnFE2_Omset;
            
            private global::System.Data.DataColumn _columnFE2_HPP;
            
            private global::System.Data.DataColumn columnFE4;
            
            private global::System.Data.DataColumn _columnFE4_Omset;
            
            private global::System.Data.DataColumn _columnFE4_HPP;
            
            private global::System.Data.DataColumn columnLainya;
            
            private global::System.Data.DataColumn _columnLainya_Omset;
            
            private global::System.Data.DataColumn _columnLainya_HPP;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public KLPDataTable() {
                this.TableName = "KLP";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal KLPDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected KLPDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BulanColumn {
                get {
                    return this.columnBulan;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FB2Column {
                get {
                    return this.columnFB2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn _FB2_OmsetColumn {
                get {
                    return this._columnFB2_Omset;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn _FB2_HPPColumn {
                get {
                    return this._columnFB2_HPP;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FB4Column {
                get {
                    return this.columnFB4;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn _FB4_OmsetColumn {
                get {
                    return this._columnFB4_Omset;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn _FB4_HPPColumn {
                get {
                    return this._columnFB4_HPP;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FE2Column {
                get {
                    return this.columnFE2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn _FE2_OmsetColumn {
                get {
                    return this._columnFE2_Omset;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn _FE2_HPPColumn {
                get {
                    return this._columnFE2_HPP;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FE4Column {
                get {
                    return this.columnFE4;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn _FE4_OmsetColumn {
                get {
                    return this._columnFE4_Omset;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn _FE4_HPPColumn {
                get {
                    return this._columnFE4_HPP;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LainyaColumn {
                get {
                    return this.columnLainya;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn _Lainya_OmsetColumn {
                get {
                    return this._columnLainya_Omset;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn _Lainya_HPPColumn {
                get {
                    return this._columnLainya_HPP;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public KLPRow this[int index] {
                get {
                    return ((KLPRow)(this.Rows[index]));
                }
            }
            
            public event KLPRowChangeEventHandler KLPRowChanging;
            
            public event KLPRowChangeEventHandler KLPRowChanged;
            
            public event KLPRowChangeEventHandler KLPRowDeleting;
            
            public event KLPRowChangeEventHandler KLPRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddKLPRow(KLPRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public KLPRow AddKLPRow(
                        string Bulan, 
                        string FB2, 
                        string _FB2_Omset, 
                        string _FB2_HPP, 
                        string FB4, 
                        string _FB4_Omset, 
                        string _FB4_HPP, 
                        string FE2, 
                        string _FE2_Omset, 
                        string _FE2_HPP, 
                        string FE4, 
                        string _FE4_Omset, 
                        string _FE4_HPP, 
                        string Lainya, 
                        string _Lainya_Omset, 
                        string _Lainya_HPP) {
                KLPRow rowKLPRow = ((KLPRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Bulan,
                        FB2,
                        _FB2_Omset,
                        _FB2_HPP,
                        FB4,
                        _FB4_Omset,
                        _FB4_HPP,
                        FE2,
                        _FE2_Omset,
                        _FE2_HPP,
                        FE4,
                        _FE4_Omset,
                        _FE4_HPP,
                        Lainya,
                        _Lainya_Omset,
                        _Lainya_HPP};
                rowKLPRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowKLPRow);
                return rowKLPRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                KLPDataTable cln = ((KLPDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new KLPDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnBulan = base.Columns["Bulan"];
                this.columnFB2 = base.Columns["FB2"];
                this._columnFB2_Omset = base.Columns["FB2.Omset"];
                this._columnFB2_HPP = base.Columns["FB2.HPP"];
                this.columnFB4 = base.Columns["FB4"];
                this._columnFB4_Omset = base.Columns["FB4.Omset"];
                this._columnFB4_HPP = base.Columns["FB4.HPP"];
                this.columnFE2 = base.Columns["FE2"];
                this._columnFE2_Omset = base.Columns["FE2.Omset"];
                this._columnFE2_HPP = base.Columns["FE2.HPP"];
                this.columnFE4 = base.Columns["FE4"];
                this._columnFE4_Omset = base.Columns["FE4.Omset"];
                this._columnFE4_HPP = base.Columns["FE4.HPP"];
                this.columnLainya = base.Columns["Lainya"];
                this._columnLainya_Omset = base.Columns["Lainya.Omset"];
                this._columnLainya_HPP = base.Columns["Lainya.HPP"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnBulan = new global::System.Data.DataColumn("Bulan", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBulan);
                this.columnFB2 = new global::System.Data.DataColumn("FB2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFB2);
                this._columnFB2_Omset = new global::System.Data.DataColumn("FB2.Omset", typeof(string), null, global::System.Data.MappingType.Element);
                this._columnFB2_Omset.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnFB2_Omset");
                this._columnFB2_Omset.ExtendedProperties.Add("Generator_UserColumnName", "FB2.Omset");
                base.Columns.Add(this._columnFB2_Omset);
                this._columnFB2_HPP = new global::System.Data.DataColumn("FB2.HPP", typeof(string), null, global::System.Data.MappingType.Element);
                this._columnFB2_HPP.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnFB2_HPP");
                this._columnFB2_HPP.ExtendedProperties.Add("Generator_UserColumnName", "FB2.HPP");
                base.Columns.Add(this._columnFB2_HPP);
                this.columnFB4 = new global::System.Data.DataColumn("FB4", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFB4);
                this._columnFB4_Omset = new global::System.Data.DataColumn("FB4.Omset", typeof(string), null, global::System.Data.MappingType.Element);
                this._columnFB4_Omset.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnFB4_Omset");
                this._columnFB4_Omset.ExtendedProperties.Add("Generator_UserColumnName", "FB4.Omset");
                base.Columns.Add(this._columnFB4_Omset);
                this._columnFB4_HPP = new global::System.Data.DataColumn("FB4.HPP", typeof(string), null, global::System.Data.MappingType.Element);
                this._columnFB4_HPP.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnFB4_HPP");
                this._columnFB4_HPP.ExtendedProperties.Add("Generator_UserColumnName", "FB4.HPP");
                base.Columns.Add(this._columnFB4_HPP);
                this.columnFE2 = new global::System.Data.DataColumn("FE2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFE2);
                this._columnFE2_Omset = new global::System.Data.DataColumn("FE2.Omset", typeof(string), null, global::System.Data.MappingType.Element);
                this._columnFE2_Omset.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnFE2_Omset");
                this._columnFE2_Omset.ExtendedProperties.Add("Generator_UserColumnName", "FE2.Omset");
                base.Columns.Add(this._columnFE2_Omset);
                this._columnFE2_HPP = new global::System.Data.DataColumn("FE2.HPP", typeof(string), null, global::System.Data.MappingType.Element);
                this._columnFE2_HPP.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnFE2_HPP");
                this._columnFE2_HPP.ExtendedProperties.Add("Generator_UserColumnName", "FE2.HPP");
                base.Columns.Add(this._columnFE2_HPP);
                this.columnFE4 = new global::System.Data.DataColumn("FE4", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFE4);
                this._columnFE4_Omset = new global::System.Data.DataColumn("FE4.Omset", typeof(string), null, global::System.Data.MappingType.Element);
                this._columnFE4_Omset.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnFE4_Omset");
                this._columnFE4_Omset.ExtendedProperties.Add("Generator_UserColumnName", "FE4.Omset");
                base.Columns.Add(this._columnFE4_Omset);
                this._columnFE4_HPP = new global::System.Data.DataColumn("FE4.HPP", typeof(string), null, global::System.Data.MappingType.Element);
                this._columnFE4_HPP.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnFE4_HPP");
                this._columnFE4_HPP.ExtendedProperties.Add("Generator_UserColumnName", "FE4.HPP");
                base.Columns.Add(this._columnFE4_HPP);
                this.columnLainya = new global::System.Data.DataColumn("Lainya", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLainya);
                this._columnLainya_Omset = new global::System.Data.DataColumn("Lainya.Omset", typeof(string), null, global::System.Data.MappingType.Element);
                this._columnLainya_Omset.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnLainya_Omset");
                this._columnLainya_Omset.ExtendedProperties.Add("Generator_UserColumnName", "Lainya.Omset");
                base.Columns.Add(this._columnLainya_Omset);
                this._columnLainya_HPP = new global::System.Data.DataColumn("Lainya.HPP", typeof(string), null, global::System.Data.MappingType.Element);
                this._columnLainya_HPP.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnLainya_HPP");
                this._columnLainya_HPP.ExtendedProperties.Add("Generator_UserColumnName", "Lainya.HPP");
                base.Columns.Add(this._columnLainya_HPP);
                this._columnFB2_HPP.Caption = "FB2.Omset";
                this._columnFB4_Omset.Caption = "FB4";
                this._columnFE4_Omset.Caption = "FE4";
                this._columnLainya_Omset.Caption = "Lainya";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public KLPRow NewKLPRow() {
                return ((KLPRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new KLPRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(KLPRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.KLPRowChanged != null)) {
                    this.KLPRowChanged(this, new KLPRowChangeEvent(((KLPRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.KLPRowChanging != null)) {
                    this.KLPRowChanging(this, new KLPRowChangeEvent(((KLPRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.KLPRowDeleted != null)) {
                    this.KLPRowDeleted(this, new KLPRowChangeEvent(((KLPRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.KLPRowDeleting != null)) {
                    this.KLPRowDeleting(this, new KLPRowChangeEvent(((KLPRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveKLPRow(KLPRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dsToko ds = new dsToko();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "KLPDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PiutangDataTable : global::System.Data.TypedTableBase<PiutangRow> {
            
            private global::System.Data.DataColumn columnKodeToko;
            
            private global::System.Data.DataColumn columnA;
            
            private global::System.Data.DataColumn columnB;
            
            private global::System.Data.DataColumn columnC;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PiutangDataTable() {
                this.TableName = "Piutang";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PiutangDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected PiutangDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn KodeTokoColumn {
                get {
                    return this.columnKodeToko;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AColumn {
                get {
                    return this.columnA;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BColumn {
                get {
                    return this.columnB;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CColumn {
                get {
                    return this.columnC;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PiutangRow this[int index] {
                get {
                    return ((PiutangRow)(this.Rows[index]));
                }
            }
            
            public event PiutangRowChangeEventHandler PiutangRowChanging;
            
            public event PiutangRowChangeEventHandler PiutangRowChanged;
            
            public event PiutangRowChangeEventHandler PiutangRowDeleting;
            
            public event PiutangRowChangeEventHandler PiutangRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddPiutangRow(PiutangRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PiutangRow AddPiutangRow(string KodeToko, double A, double B, double C) {
                PiutangRow rowPiutangRow = ((PiutangRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        KodeToko,
                        A,
                        B,
                        C};
                rowPiutangRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowPiutangRow);
                return rowPiutangRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                PiutangDataTable cln = ((PiutangDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new PiutangDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnKodeToko = base.Columns["KodeToko"];
                this.columnA = base.Columns["A"];
                this.columnB = base.Columns["B"];
                this.columnC = base.Columns["C"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnKodeToko = new global::System.Data.DataColumn("KodeToko", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnKodeToko);
                this.columnA = new global::System.Data.DataColumn("A", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnA);
                this.columnB = new global::System.Data.DataColumn("B", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnB);
                this.columnC = new global::System.Data.DataColumn("C", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnC);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PiutangRow NewPiutangRow() {
                return ((PiutangRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new PiutangRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(PiutangRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PiutangRowChanged != null)) {
                    this.PiutangRowChanged(this, new PiutangRowChangeEvent(((PiutangRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PiutangRowChanging != null)) {
                    this.PiutangRowChanging(this, new PiutangRowChangeEvent(((PiutangRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PiutangRowDeleted != null)) {
                    this.PiutangRowDeleted(this, new PiutangRowChangeEvent(((PiutangRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PiutangRowDeleting != null)) {
                    this.PiutangRowDeleting(this, new PiutangRowChangeEvent(((PiutangRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovePiutangRow(PiutangRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dsToko ds = new dsToko();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PiutangDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TokoRow : global::System.Data.DataRow {
            
            private TokoDataTable tableToko;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TokoRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableToko = ((TokoDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string KodeToko {
                get {
                    try {
                        return ((string)(this[this.tableToko.KodeTokoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'KodeToko\' in table \'Toko\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableToko.KodeTokoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NamaToko {
                get {
                    try {
                        return ((string)(this[this.tableToko.NamaTokoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NamaToko\' in table \'Toko\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableToko.NamaTokoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string WilID {
                get {
                    try {
                        return ((string)(this[this.tableToko.WilIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'WilID\' in table \'Toko\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableToko.WilIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Kota {
                get {
                    try {
                        return ((string)(this[this.tableToko.KotaColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Kota\' in table \'Toko\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableToko.KotaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Daerah {
                get {
                    try {
                        return ((string)(this[this.tableToko.DaerahColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Daerah\' in table \'Toko\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableToko.DaerahColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsKodeTokoNull() {
                return this.IsNull(this.tableToko.KodeTokoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetKodeTokoNull() {
                this[this.tableToko.KodeTokoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNamaTokoNull() {
                return this.IsNull(this.tableToko.NamaTokoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNamaTokoNull() {
                this[this.tableToko.NamaTokoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWilIDNull() {
                return this.IsNull(this.tableToko.WilIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWilIDNull() {
                this[this.tableToko.WilIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsKotaNull() {
                return this.IsNull(this.tableToko.KotaColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetKotaNull() {
                this[this.tableToko.KotaColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDaerahNull() {
                return this.IsNull(this.tableToko.DaerahColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDaerahNull() {
                this[this.tableToko.DaerahColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class KLPRow : global::System.Data.DataRow {
            
            private KLPDataTable tableKLP;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal KLPRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableKLP = ((KLPDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Bulan {
                get {
                    try {
                        return ((string)(this[this.tableKLP.BulanColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Bulan\' in table \'KLP\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableKLP.BulanColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FB2 {
                get {
                    try {
                        return ((string)(this[this.tableKLP.FB2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FB2\' in table \'KLP\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableKLP.FB2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string _FB2_Omset {
                get {
                    try {
                        return ((string)(this[this.tableKLP._FB2_OmsetColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FB2.Omset\' in table \'KLP\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableKLP._FB2_OmsetColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string _FB2_HPP {
                get {
                    try {
                        return ((string)(this[this.tableKLP._FB2_HPPColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FB2.HPP\' in table \'KLP\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableKLP._FB2_HPPColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FB4 {
                get {
                    try {
                        return ((string)(this[this.tableKLP.FB4Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FB4\' in table \'KLP\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableKLP.FB4Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string _FB4_Omset {
                get {
                    try {
                        return ((string)(this[this.tableKLP._FB4_OmsetColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FB4.Omset\' in table \'KLP\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableKLP._FB4_OmsetColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string _FB4_HPP {
                get {
                    try {
                        return ((string)(this[this.tableKLP._FB4_HPPColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FB4.HPP\' in table \'KLP\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableKLP._FB4_HPPColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FE2 {
                get {
                    try {
                        return ((string)(this[this.tableKLP.FE2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FE2\' in table \'KLP\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableKLP.FE2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string _FE2_Omset {
                get {
                    try {
                        return ((string)(this[this.tableKLP._FE2_OmsetColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FE2.Omset\' in table \'KLP\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableKLP._FE2_OmsetColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string _FE2_HPP {
                get {
                    try {
                        return ((string)(this[this.tableKLP._FE2_HPPColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FE2.HPP\' in table \'KLP\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableKLP._FE2_HPPColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FE4 {
                get {
                    try {
                        return ((string)(this[this.tableKLP.FE4Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FE4\' in table \'KLP\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableKLP.FE4Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string _FE4_Omset {
                get {
                    try {
                        return ((string)(this[this.tableKLP._FE4_OmsetColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FE4.Omset\' in table \'KLP\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableKLP._FE4_OmsetColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string _FE4_HPP {
                get {
                    try {
                        return ((string)(this[this.tableKLP._FE4_HPPColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FE4.HPP\' in table \'KLP\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableKLP._FE4_HPPColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Lainya {
                get {
                    try {
                        return ((string)(this[this.tableKLP.LainyaColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Lainya\' in table \'KLP\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableKLP.LainyaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string _Lainya_Omset {
                get {
                    try {
                        return ((string)(this[this.tableKLP._Lainya_OmsetColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Lainya.Omset\' in table \'KLP\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableKLP._Lainya_OmsetColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string _Lainya_HPP {
                get {
                    try {
                        return ((string)(this[this.tableKLP._Lainya_HPPColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Lainya.HPP\' in table \'KLP\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableKLP._Lainya_HPPColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBulanNull() {
                return this.IsNull(this.tableKLP.BulanColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBulanNull() {
                this[this.tableKLP.BulanColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFB2Null() {
                return this.IsNull(this.tableKLP.FB2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFB2Null() {
                this[this.tableKLP.FB2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_FB2_OmsetNull() {
                return this.IsNull(this.tableKLP._FB2_OmsetColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set_FB2_OmsetNull() {
                this[this.tableKLP._FB2_OmsetColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_FB2_HPPNull() {
                return this.IsNull(this.tableKLP._FB2_HPPColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set_FB2_HPPNull() {
                this[this.tableKLP._FB2_HPPColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFB4Null() {
                return this.IsNull(this.tableKLP.FB4Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFB4Null() {
                this[this.tableKLP.FB4Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_FB4_OmsetNull() {
                return this.IsNull(this.tableKLP._FB4_OmsetColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set_FB4_OmsetNull() {
                this[this.tableKLP._FB4_OmsetColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_FB4_HPPNull() {
                return this.IsNull(this.tableKLP._FB4_HPPColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set_FB4_HPPNull() {
                this[this.tableKLP._FB4_HPPColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFE2Null() {
                return this.IsNull(this.tableKLP.FE2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFE2Null() {
                this[this.tableKLP.FE2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_FE2_OmsetNull() {
                return this.IsNull(this.tableKLP._FE2_OmsetColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set_FE2_OmsetNull() {
                this[this.tableKLP._FE2_OmsetColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_FE2_HPPNull() {
                return this.IsNull(this.tableKLP._FE2_HPPColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set_FE2_HPPNull() {
                this[this.tableKLP._FE2_HPPColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFE4Null() {
                return this.IsNull(this.tableKLP.FE4Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFE4Null() {
                this[this.tableKLP.FE4Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_FE4_OmsetNull() {
                return this.IsNull(this.tableKLP._FE4_OmsetColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set_FE4_OmsetNull() {
                this[this.tableKLP._FE4_OmsetColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_FE4_HPPNull() {
                return this.IsNull(this.tableKLP._FE4_HPPColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set_FE4_HPPNull() {
                this[this.tableKLP._FE4_HPPColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLainyaNull() {
                return this.IsNull(this.tableKLP.LainyaColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLainyaNull() {
                this[this.tableKLP.LainyaColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_Lainya_OmsetNull() {
                return this.IsNull(this.tableKLP._Lainya_OmsetColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set_Lainya_OmsetNull() {
                this[this.tableKLP._Lainya_OmsetColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_Lainya_HPPNull() {
                return this.IsNull(this.tableKLP._Lainya_HPPColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set_Lainya_HPPNull() {
                this[this.tableKLP._Lainya_HPPColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class PiutangRow : global::System.Data.DataRow {
            
            private PiutangDataTable tablePiutang;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PiutangRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePiutang = ((PiutangDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string KodeToko {
                get {
                    try {
                        return ((string)(this[this.tablePiutang.KodeTokoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'KodeToko\' in table \'Piutang\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePiutang.KodeTokoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double A {
                get {
                    try {
                        return ((double)(this[this.tablePiutang.AColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'A\' in table \'Piutang\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePiutang.AColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double B {
                get {
                    try {
                        return ((double)(this[this.tablePiutang.BColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'B\' in table \'Piutang\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePiutang.BColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double C {
                get {
                    try {
                        return ((double)(this[this.tablePiutang.CColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'C\' in table \'Piutang\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePiutang.CColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsKodeTokoNull() {
                return this.IsNull(this.tablePiutang.KodeTokoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetKodeTokoNull() {
                this[this.tablePiutang.KodeTokoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsANull() {
                return this.IsNull(this.tablePiutang.AColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetANull() {
                this[this.tablePiutang.AColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBNull() {
                return this.IsNull(this.tablePiutang.BColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBNull() {
                this[this.tablePiutang.BColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCNull() {
                return this.IsNull(this.tablePiutang.CColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCNull() {
                this[this.tablePiutang.CColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TokoRowChangeEvent : global::System.EventArgs {
            
            private TokoRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TokoRowChangeEvent(TokoRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TokoRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class KLPRowChangeEvent : global::System.EventArgs {
            
            private KLPRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public KLPRowChangeEvent(KLPRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public KLPRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class PiutangRowChangeEvent : global::System.EventArgs {
            
            private PiutangRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PiutangRowChangeEvent(PiutangRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PiutangRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591