//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4927
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace ISA.Toko.DataTemplates {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("dsCetakOutletBaru")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class dsCetakOutletBaru : global::System.Data.DataSet {
        
        private Data1DataTable tableData1;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public dsCetakOutletBaru() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected dsCetakOutletBaru(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["Data1"] != null)) {
                    base.Tables.Add(new Data1DataTable(ds.Tables["Data1"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Data1DataTable Data1 {
            get {
                return this.tableData1;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            dsCetakOutletBaru cln = ((dsCetakOutletBaru)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["Data1"] != null)) {
                    base.Tables.Add(new Data1DataTable(ds.Tables["Data1"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableData1 = ((Data1DataTable)(base.Tables["Data1"]));
            if ((initTable == true)) {
                if ((this.tableData1 != null)) {
                    this.tableData1.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "dsCetakOutletBaru";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/dsCetakOutletBaru.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableData1 = new Data1DataTable();
            base.Tables.Add(this.tableData1);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeData1() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            dsCetakOutletBaru ds = new dsCetakOutletBaru();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void Data1RowChangeEventHandler(object sender, Data1RowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class Data1DataTable : global::System.Data.TypedTableBase<Data1Row> {
            
            private global::System.Data.DataColumn columnRowID;
            
            private global::System.Data.DataColumn columnkd_toko;
            
            private global::System.Data.DataColumn columnnamatoko;
            
            private global::System.Data.DataColumn columnalamat;
            
            private global::System.Data.DataColumn columnkota;
            
            private global::System.Data.DataColumn columndaerah;
            
            private global::System.Data.DataColumn columnkecamatan;
            
            private global::System.Data.DataColumn columnpropinsi;
            
            private global::System.Data.DataColumn columnidwil;
            
            private global::System.Data.DataColumn columnidtoko;
            
            private global::System.Data.DataColumn columnnotelp;
            
            private global::System.Data.DataColumn columnpemilik;
            
            private global::System.Data.DataColumn columnpngjwb;
            
            private global::System.Data.DataColumn columnalamat1;
            
            private global::System.Data.DataColumn columnnotelp1;
            
            private global::System.Data.DataColumn columncabang;
            
            private global::System.Data.DataColumn columncatatan;
            
            private global::System.Data.DataColumn columnSyncFlag;
            
            private global::System.Data.DataColumn columnLastUpdatedBy;
            
            private global::System.Data.DataColumn columnLastUpdatedTime;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Data1DataTable() {
                this.TableName = "Data1";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Data1DataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected Data1DataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RowIDColumn {
                get {
                    return this.columnRowID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn kd_tokoColumn {
                get {
                    return this.columnkd_toko;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn namatokoColumn {
                get {
                    return this.columnnamatoko;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn alamatColumn {
                get {
                    return this.columnalamat;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn kotaColumn {
                get {
                    return this.columnkota;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn daerahColumn {
                get {
                    return this.columndaerah;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn kecamatanColumn {
                get {
                    return this.columnkecamatan;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn propinsiColumn {
                get {
                    return this.columnpropinsi;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn idwilColumn {
                get {
                    return this.columnidwil;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn idtokoColumn {
                get {
                    return this.columnidtoko;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn notelpColumn {
                get {
                    return this.columnnotelp;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn pemilikColumn {
                get {
                    return this.columnpemilik;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn pngjwbColumn {
                get {
                    return this.columnpngjwb;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn alamat1Column {
                get {
                    return this.columnalamat1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn notelp1Column {
                get {
                    return this.columnnotelp1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cabangColumn {
                get {
                    return this.columncabang;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn catatanColumn {
                get {
                    return this.columncatatan;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SyncFlagColumn {
                get {
                    return this.columnSyncFlag;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LastUpdatedByColumn {
                get {
                    return this.columnLastUpdatedBy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LastUpdatedTimeColumn {
                get {
                    return this.columnLastUpdatedTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Data1Row this[int index] {
                get {
                    return ((Data1Row)(this.Rows[index]));
                }
            }
            
            public event Data1RowChangeEventHandler Data1RowChanging;
            
            public event Data1RowChangeEventHandler Data1RowChanged;
            
            public event Data1RowChangeEventHandler Data1RowDeleting;
            
            public event Data1RowChangeEventHandler Data1RowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddData1Row(Data1Row row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Data1Row AddData1Row(
                        string RowID, 
                        string kd_toko, 
                        string namatoko, 
                        string alamat, 
                        string kota, 
                        string daerah, 
                        string kecamatan, 
                        string propinsi, 
                        string idwil, 
                        string idtoko, 
                        string notelp, 
                        string pemilik, 
                        string pngjwb, 
                        string alamat1, 
                        string notelp1, 
                        string cabang, 
                        string catatan, 
                        string SyncFlag, 
                        string LastUpdatedBy, 
                        string LastUpdatedTime) {
                Data1Row rowData1Row = ((Data1Row)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        RowID,
                        kd_toko,
                        namatoko,
                        alamat,
                        kota,
                        daerah,
                        kecamatan,
                        propinsi,
                        idwil,
                        idtoko,
                        notelp,
                        pemilik,
                        pngjwb,
                        alamat1,
                        notelp1,
                        cabang,
                        catatan,
                        SyncFlag,
                        LastUpdatedBy,
                        LastUpdatedTime};
                rowData1Row.ItemArray = columnValuesArray;
                this.Rows.Add(rowData1Row);
                return rowData1Row;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                Data1DataTable cln = ((Data1DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new Data1DataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnRowID = base.Columns["RowID"];
                this.columnkd_toko = base.Columns["kd_toko"];
                this.columnnamatoko = base.Columns["namatoko"];
                this.columnalamat = base.Columns["alamat"];
                this.columnkota = base.Columns["kota"];
                this.columndaerah = base.Columns["daerah"];
                this.columnkecamatan = base.Columns["kecamatan"];
                this.columnpropinsi = base.Columns["propinsi"];
                this.columnidwil = base.Columns["idwil"];
                this.columnidtoko = base.Columns["idtoko"];
                this.columnnotelp = base.Columns["notelp"];
                this.columnpemilik = base.Columns["pemilik"];
                this.columnpngjwb = base.Columns["pngjwb"];
                this.columnalamat1 = base.Columns["alamat1"];
                this.columnnotelp1 = base.Columns["notelp1"];
                this.columncabang = base.Columns["cabang"];
                this.columncatatan = base.Columns["catatan"];
                this.columnSyncFlag = base.Columns["SyncFlag"];
                this.columnLastUpdatedBy = base.Columns["LastUpdatedBy"];
                this.columnLastUpdatedTime = base.Columns["LastUpdatedTime"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnRowID = new global::System.Data.DataColumn("RowID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRowID);
                this.columnkd_toko = new global::System.Data.DataColumn("kd_toko", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnkd_toko);
                this.columnnamatoko = new global::System.Data.DataColumn("namatoko", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnnamatoko);
                this.columnalamat = new global::System.Data.DataColumn("alamat", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnalamat);
                this.columnkota = new global::System.Data.DataColumn("kota", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnkota);
                this.columndaerah = new global::System.Data.DataColumn("daerah", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndaerah);
                this.columnkecamatan = new global::System.Data.DataColumn("kecamatan", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnkecamatan);
                this.columnpropinsi = new global::System.Data.DataColumn("propinsi", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpropinsi);
                this.columnidwil = new global::System.Data.DataColumn("idwil", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnidwil);
                this.columnidtoko = new global::System.Data.DataColumn("idtoko", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnidtoko);
                this.columnnotelp = new global::System.Data.DataColumn("notelp", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnnotelp);
                this.columnpemilik = new global::System.Data.DataColumn("pemilik", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpemilik);
                this.columnpngjwb = new global::System.Data.DataColumn("pngjwb", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpngjwb);
                this.columnalamat1 = new global::System.Data.DataColumn("alamat1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnalamat1);
                this.columnnotelp1 = new global::System.Data.DataColumn("notelp1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnnotelp1);
                this.columncabang = new global::System.Data.DataColumn("cabang", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncabang);
                this.columncatatan = new global::System.Data.DataColumn("catatan", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncatatan);
                this.columnSyncFlag = new global::System.Data.DataColumn("SyncFlag", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSyncFlag);
                this.columnLastUpdatedBy = new global::System.Data.DataColumn("LastUpdatedBy", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLastUpdatedBy);
                this.columnLastUpdatedTime = new global::System.Data.DataColumn("LastUpdatedTime", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLastUpdatedTime);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Data1Row NewData1Row() {
                return ((Data1Row)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new Data1Row(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(Data1Row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Data1RowChanged != null)) {
                    this.Data1RowChanged(this, new Data1RowChangeEvent(((Data1Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Data1RowChanging != null)) {
                    this.Data1RowChanging(this, new Data1RowChangeEvent(((Data1Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Data1RowDeleted != null)) {
                    this.Data1RowDeleted(this, new Data1RowChangeEvent(((Data1Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Data1RowDeleting != null)) {
                    this.Data1RowDeleting(this, new Data1RowChangeEvent(((Data1Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveData1Row(Data1Row row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dsCetakOutletBaru ds = new dsCetakOutletBaru();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Data1DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class Data1Row : global::System.Data.DataRow {
            
            private Data1DataTable tableData1;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Data1Row(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableData1 = ((Data1DataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RowID {
                get {
                    try {
                        return ((string)(this[this.tableData1.RowIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RowID\' in table \'Data1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableData1.RowIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string kd_toko {
                get {
                    try {
                        return ((string)(this[this.tableData1.kd_tokoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'kd_toko\' in table \'Data1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableData1.kd_tokoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string namatoko {
                get {
                    try {
                        return ((string)(this[this.tableData1.namatokoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'namatoko\' in table \'Data1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableData1.namatokoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string alamat {
                get {
                    try {
                        return ((string)(this[this.tableData1.alamatColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'alamat\' in table \'Data1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableData1.alamatColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string kota {
                get {
                    try {
                        return ((string)(this[this.tableData1.kotaColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'kota\' in table \'Data1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableData1.kotaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string daerah {
                get {
                    try {
                        return ((string)(this[this.tableData1.daerahColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'daerah\' in table \'Data1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableData1.daerahColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string kecamatan {
                get {
                    try {
                        return ((string)(this[this.tableData1.kecamatanColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'kecamatan\' in table \'Data1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableData1.kecamatanColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string propinsi {
                get {
                    try {
                        return ((string)(this[this.tableData1.propinsiColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'propinsi\' in table \'Data1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableData1.propinsiColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string idwil {
                get {
                    try {
                        return ((string)(this[this.tableData1.idwilColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'idwil\' in table \'Data1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableData1.idwilColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string idtoko {
                get {
                    try {
                        return ((string)(this[this.tableData1.idtokoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'idtoko\' in table \'Data1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableData1.idtokoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string notelp {
                get {
                    try {
                        return ((string)(this[this.tableData1.notelpColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'notelp\' in table \'Data1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableData1.notelpColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string pemilik {
                get {
                    try {
                        return ((string)(this[this.tableData1.pemilikColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'pemilik\' in table \'Data1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableData1.pemilikColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string pngjwb {
                get {
                    try {
                        return ((string)(this[this.tableData1.pngjwbColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'pngjwb\' in table \'Data1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableData1.pngjwbColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string alamat1 {
                get {
                    try {
                        return ((string)(this[this.tableData1.alamat1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'alamat1\' in table \'Data1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableData1.alamat1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string notelp1 {
                get {
                    try {
                        return ((string)(this[this.tableData1.notelp1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'notelp1\' in table \'Data1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableData1.notelp1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cabang {
                get {
                    try {
                        return ((string)(this[this.tableData1.cabangColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'cabang\' in table \'Data1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableData1.cabangColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string catatan {
                get {
                    try {
                        return ((string)(this[this.tableData1.catatanColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'catatan\' in table \'Data1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableData1.catatanColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SyncFlag {
                get {
                    try {
                        return ((string)(this[this.tableData1.SyncFlagColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SyncFlag\' in table \'Data1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableData1.SyncFlagColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LastUpdatedBy {
                get {
                    try {
                        return ((string)(this[this.tableData1.LastUpdatedByColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LastUpdatedBy\' in table \'Data1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableData1.LastUpdatedByColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LastUpdatedTime {
                get {
                    try {
                        return ((string)(this[this.tableData1.LastUpdatedTimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LastUpdatedTime\' in table \'Data1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableData1.LastUpdatedTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRowIDNull() {
                return this.IsNull(this.tableData1.RowIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRowIDNull() {
                this[this.tableData1.RowIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Iskd_tokoNull() {
                return this.IsNull(this.tableData1.kd_tokoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setkd_tokoNull() {
                this[this.tableData1.kd_tokoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnamatokoNull() {
                return this.IsNull(this.tableData1.namatokoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnamatokoNull() {
                this[this.tableData1.namatokoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsalamatNull() {
                return this.IsNull(this.tableData1.alamatColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetalamatNull() {
                this[this.tableData1.alamatColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IskotaNull() {
                return this.IsNull(this.tableData1.kotaColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetkotaNull() {
                this[this.tableData1.kotaColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdaerahNull() {
                return this.IsNull(this.tableData1.daerahColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdaerahNull() {
                this[this.tableData1.daerahColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IskecamatanNull() {
                return this.IsNull(this.tableData1.kecamatanColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetkecamatanNull() {
                this[this.tableData1.kecamatanColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IspropinsiNull() {
                return this.IsNull(this.tableData1.propinsiColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetpropinsiNull() {
                this[this.tableData1.propinsiColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsidwilNull() {
                return this.IsNull(this.tableData1.idwilColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetidwilNull() {
                this[this.tableData1.idwilColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsidtokoNull() {
                return this.IsNull(this.tableData1.idtokoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetidtokoNull() {
                this[this.tableData1.idtokoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnotelpNull() {
                return this.IsNull(this.tableData1.notelpColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnotelpNull() {
                this[this.tableData1.notelpColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IspemilikNull() {
                return this.IsNull(this.tableData1.pemilikColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetpemilikNull() {
                this[this.tableData1.pemilikColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IspngjwbNull() {
                return this.IsNull(this.tableData1.pngjwbColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetpngjwbNull() {
                this[this.tableData1.pngjwbColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isalamat1Null() {
                return this.IsNull(this.tableData1.alamat1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setalamat1Null() {
                this[this.tableData1.alamat1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isnotelp1Null() {
                return this.IsNull(this.tableData1.notelp1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setnotelp1Null() {
                this[this.tableData1.notelp1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscabangNull() {
                return this.IsNull(this.tableData1.cabangColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcabangNull() {
                this[this.tableData1.cabangColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscatatanNull() {
                return this.IsNull(this.tableData1.catatanColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcatatanNull() {
                this[this.tableData1.catatanColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSyncFlagNull() {
                return this.IsNull(this.tableData1.SyncFlagColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSyncFlagNull() {
                this[this.tableData1.SyncFlagColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLastUpdatedByNull() {
                return this.IsNull(this.tableData1.LastUpdatedByColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLastUpdatedByNull() {
                this[this.tableData1.LastUpdatedByColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLastUpdatedTimeNull() {
                return this.IsNull(this.tableData1.LastUpdatedTimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLastUpdatedTimeNull() {
                this[this.tableData1.LastUpdatedTimeColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class Data1RowChangeEvent : global::System.EventArgs {
            
            private Data1Row eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Data1RowChangeEvent(Data1Row row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Data1Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591