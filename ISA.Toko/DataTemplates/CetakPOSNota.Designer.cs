//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.8009
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace ISA.Toko.DataTemplates {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("CetakPOSNota")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class CetakPOSNota : global::System.Data.DataSet {
        
        private PosNotaDataTable tablePosNota;
        
        private DataPerusahaanDataTable tableDataPerusahaan;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public CetakPOSNota() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected CetakPOSNota(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["PosNota"] != null)) {
                    base.Tables.Add(new PosNotaDataTable(ds.Tables["PosNota"]));
                }
                if ((ds.Tables["DataPerusahaan"] != null)) {
                    base.Tables.Add(new DataPerusahaanDataTable(ds.Tables["DataPerusahaan"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PosNotaDataTable PosNota {
            get {
                return this.tablePosNota;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DataPerusahaanDataTable DataPerusahaan {
            get {
                return this.tableDataPerusahaan;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            CetakPOSNota cln = ((CetakPOSNota)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["PosNota"] != null)) {
                    base.Tables.Add(new PosNotaDataTable(ds.Tables["PosNota"]));
                }
                if ((ds.Tables["DataPerusahaan"] != null)) {
                    base.Tables.Add(new DataPerusahaanDataTable(ds.Tables["DataPerusahaan"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tablePosNota = ((PosNotaDataTable)(base.Tables["PosNota"]));
            if ((initTable == true)) {
                if ((this.tablePosNota != null)) {
                    this.tablePosNota.InitVars();
                }
            }
            this.tableDataPerusahaan = ((DataPerusahaanDataTable)(base.Tables["DataPerusahaan"]));
            if ((initTable == true)) {
                if ((this.tableDataPerusahaan != null)) {
                    this.tableDataPerusahaan.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "CetakPOSNota";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/CetakPOSNota.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tablePosNota = new PosNotaDataTable();
            base.Tables.Add(this.tablePosNota);
            this.tableDataPerusahaan = new DataPerusahaanDataTable();
            base.Tables.Add(this.tableDataPerusahaan);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializePosNota() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeDataPerusahaan() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            CetakPOSNota ds = new CetakPOSNota();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void PosNotaRowChangeEventHandler(object sender, PosNotaRowChangeEvent e);
        
        public delegate void DataPerusahaanRowChangeEventHandler(object sender, DataPerusahaanRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PosNotaDataTable : global::System.Data.TypedTableBase<PosNotaRow> {
            
            private global::System.Data.DataColumn columnNoNota;
            
            private global::System.Data.DataColumn columnNamaSales;
            
            private global::System.Data.DataColumn columnNamaToko;
            
            private global::System.Data.DataColumn columnAlamat;
            
            private global::System.Data.DataColumn columnKota;
            
            private global::System.Data.DataColumn columnNamaStok;
            
            private global::System.Data.DataColumn columnQtyNota;
            
            private global::System.Data.DataColumn columnHrgJual;
            
            private global::System.Data.DataColumn columnTglNota;
            
            private global::System.Data.DataColumn columnjum;
            
            private global::System.Data.DataColumn columnnd1;
            
            private global::System.Data.DataColumn columnnd2;
            
            private global::System.Data.DataColumn columnnd3;
            
            private global::System.Data.DataColumn columnPot;
            
            private global::System.Data.DataColumn columnSatSolo;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PosNotaDataTable() {
                this.TableName = "PosNota";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PosNotaDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected PosNotaDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NoNotaColumn {
                get {
                    return this.columnNoNota;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NamaSalesColumn {
                get {
                    return this.columnNamaSales;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NamaTokoColumn {
                get {
                    return this.columnNamaToko;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AlamatColumn {
                get {
                    return this.columnAlamat;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn KotaColumn {
                get {
                    return this.columnKota;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NamaStokColumn {
                get {
                    return this.columnNamaStok;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn QtyNotaColumn {
                get {
                    return this.columnQtyNota;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HrgJualColumn {
                get {
                    return this.columnHrgJual;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TglNotaColumn {
                get {
                    return this.columnTglNota;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn jumColumn {
                get {
                    return this.columnjum;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn nd1Column {
                get {
                    return this.columnnd1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn nd2Column {
                get {
                    return this.columnnd2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn nd3Column {
                get {
                    return this.columnnd3;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PotColumn {
                get {
                    return this.columnPot;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SatSoloColumn {
                get {
                    return this.columnSatSolo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PosNotaRow this[int index] {
                get {
                    return ((PosNotaRow)(this.Rows[index]));
                }
            }
            
            public event PosNotaRowChangeEventHandler PosNotaRowChanging;
            
            public event PosNotaRowChangeEventHandler PosNotaRowChanged;
            
            public event PosNotaRowChangeEventHandler PosNotaRowDeleting;
            
            public event PosNotaRowChangeEventHandler PosNotaRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddPosNotaRow(PosNotaRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PosNotaRow AddPosNotaRow(string NoNota, string NamaSales, string NamaToko, string Alamat, string Kota, string NamaStok, string QtyNota, string HrgJual, string TglNota, string jum, string nd1, string nd2, string nd3, string Pot, string SatSolo) {
                PosNotaRow rowPosNotaRow = ((PosNotaRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        NoNota,
                        NamaSales,
                        NamaToko,
                        Alamat,
                        Kota,
                        NamaStok,
                        QtyNota,
                        HrgJual,
                        TglNota,
                        jum,
                        nd1,
                        nd2,
                        nd3,
                        Pot,
                        SatSolo};
                rowPosNotaRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowPosNotaRow);
                return rowPosNotaRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                PosNotaDataTable cln = ((PosNotaDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new PosNotaDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnNoNota = base.Columns["NoNota"];
                this.columnNamaSales = base.Columns["NamaSales"];
                this.columnNamaToko = base.Columns["NamaToko"];
                this.columnAlamat = base.Columns["Alamat"];
                this.columnKota = base.Columns["Kota"];
                this.columnNamaStok = base.Columns["NamaStok"];
                this.columnQtyNota = base.Columns["QtyNota"];
                this.columnHrgJual = base.Columns["HrgJual"];
                this.columnTglNota = base.Columns["TglNota"];
                this.columnjum = base.Columns["jum"];
                this.columnnd1 = base.Columns["nd1"];
                this.columnnd2 = base.Columns["nd2"];
                this.columnnd3 = base.Columns["nd3"];
                this.columnPot = base.Columns["Pot"];
                this.columnSatSolo = base.Columns["SatSolo"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnNoNota = new global::System.Data.DataColumn("NoNota", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNoNota);
                this.columnNamaSales = new global::System.Data.DataColumn("NamaSales", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNamaSales);
                this.columnNamaToko = new global::System.Data.DataColumn("NamaToko", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNamaToko);
                this.columnAlamat = new global::System.Data.DataColumn("Alamat", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAlamat);
                this.columnKota = new global::System.Data.DataColumn("Kota", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnKota);
                this.columnNamaStok = new global::System.Data.DataColumn("NamaStok", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNamaStok);
                this.columnQtyNota = new global::System.Data.DataColumn("QtyNota", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnQtyNota);
                this.columnHrgJual = new global::System.Data.DataColumn("HrgJual", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHrgJual);
                this.columnTglNota = new global::System.Data.DataColumn("TglNota", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTglNota);
                this.columnjum = new global::System.Data.DataColumn("jum", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnjum);
                this.columnnd1 = new global::System.Data.DataColumn("nd1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnnd1);
                this.columnnd2 = new global::System.Data.DataColumn("nd2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnnd2);
                this.columnnd3 = new global::System.Data.DataColumn("nd3", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnnd3);
                this.columnPot = new global::System.Data.DataColumn("Pot", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPot);
                this.columnSatSolo = new global::System.Data.DataColumn("SatSolo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSatSolo);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PosNotaRow NewPosNotaRow() {
                return ((PosNotaRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new PosNotaRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(PosNotaRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PosNotaRowChanged != null)) {
                    this.PosNotaRowChanged(this, new PosNotaRowChangeEvent(((PosNotaRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PosNotaRowChanging != null)) {
                    this.PosNotaRowChanging(this, new PosNotaRowChangeEvent(((PosNotaRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PosNotaRowDeleted != null)) {
                    this.PosNotaRowDeleted(this, new PosNotaRowChangeEvent(((PosNotaRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PosNotaRowDeleting != null)) {
                    this.PosNotaRowDeleting(this, new PosNotaRowChangeEvent(((PosNotaRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovePosNotaRow(PosNotaRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                CetakPOSNota ds = new CetakPOSNota();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PosNotaDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class DataPerusahaanDataTable : global::System.Data.TypedTableBase<DataPerusahaanRow> {
            
            private global::System.Data.DataColumn columnNama;
            
            private global::System.Data.DataColumn columnAlamat;
            
            private global::System.Data.DataColumn columnEmail;
            
            private global::System.Data.DataColumn columnFax;
            
            private global::System.Data.DataColumn columnKodePos;
            
            private global::System.Data.DataColumn columnKota;
            
            private global::System.Data.DataColumn columnNPWP;
            
            private global::System.Data.DataColumn columnPropinsi;
            
            private global::System.Data.DataColumn columnTelp;
            
            private global::System.Data.DataColumn columnTglPKP;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataPerusahaanDataTable() {
                this.TableName = "DataPerusahaan";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DataPerusahaanDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected DataPerusahaanDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NamaColumn {
                get {
                    return this.columnNama;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AlamatColumn {
                get {
                    return this.columnAlamat;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmailColumn {
                get {
                    return this.columnEmail;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FaxColumn {
                get {
                    return this.columnFax;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn KodePosColumn {
                get {
                    return this.columnKodePos;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn KotaColumn {
                get {
                    return this.columnKota;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NPWPColumn {
                get {
                    return this.columnNPWP;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PropinsiColumn {
                get {
                    return this.columnPropinsi;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TelpColumn {
                get {
                    return this.columnTelp;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TglPKPColumn {
                get {
                    return this.columnTglPKP;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataPerusahaanRow this[int index] {
                get {
                    return ((DataPerusahaanRow)(this.Rows[index]));
                }
            }
            
            public event DataPerusahaanRowChangeEventHandler DataPerusahaanRowChanging;
            
            public event DataPerusahaanRowChangeEventHandler DataPerusahaanRowChanged;
            
            public event DataPerusahaanRowChangeEventHandler DataPerusahaanRowDeleting;
            
            public event DataPerusahaanRowChangeEventHandler DataPerusahaanRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddDataPerusahaanRow(DataPerusahaanRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataPerusahaanRow AddDataPerusahaanRow(string Nama, string Alamat, string Email, string Fax, string KodePos, string Kota, string NPWP, string Propinsi, string Telp, string TglPKP) {
                DataPerusahaanRow rowDataPerusahaanRow = ((DataPerusahaanRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Nama,
                        Alamat,
                        Email,
                        Fax,
                        KodePos,
                        Kota,
                        NPWP,
                        Propinsi,
                        Telp,
                        TglPKP};
                rowDataPerusahaanRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowDataPerusahaanRow);
                return rowDataPerusahaanRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                DataPerusahaanDataTable cln = ((DataPerusahaanDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new DataPerusahaanDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnNama = base.Columns["Nama"];
                this.columnAlamat = base.Columns["Alamat"];
                this.columnEmail = base.Columns["Email"];
                this.columnFax = base.Columns["Fax"];
                this.columnKodePos = base.Columns["KodePos"];
                this.columnKota = base.Columns["Kota"];
                this.columnNPWP = base.Columns["NPWP"];
                this.columnPropinsi = base.Columns["Propinsi"];
                this.columnTelp = base.Columns["Telp"];
                this.columnTglPKP = base.Columns["TglPKP"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnNama = new global::System.Data.DataColumn("Nama", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNama);
                this.columnAlamat = new global::System.Data.DataColumn("Alamat", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAlamat);
                this.columnEmail = new global::System.Data.DataColumn("Email", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmail);
                this.columnFax = new global::System.Data.DataColumn("Fax", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFax);
                this.columnKodePos = new global::System.Data.DataColumn("KodePos", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnKodePos);
                this.columnKota = new global::System.Data.DataColumn("Kota", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnKota);
                this.columnNPWP = new global::System.Data.DataColumn("NPWP", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNPWP);
                this.columnPropinsi = new global::System.Data.DataColumn("Propinsi", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPropinsi);
                this.columnTelp = new global::System.Data.DataColumn("Telp", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTelp);
                this.columnTglPKP = new global::System.Data.DataColumn("TglPKP", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTglPKP);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataPerusahaanRow NewDataPerusahaanRow() {
                return ((DataPerusahaanRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new DataPerusahaanRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(DataPerusahaanRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DataPerusahaanRowChanged != null)) {
                    this.DataPerusahaanRowChanged(this, new DataPerusahaanRowChangeEvent(((DataPerusahaanRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DataPerusahaanRowChanging != null)) {
                    this.DataPerusahaanRowChanging(this, new DataPerusahaanRowChangeEvent(((DataPerusahaanRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DataPerusahaanRowDeleted != null)) {
                    this.DataPerusahaanRowDeleted(this, new DataPerusahaanRowChangeEvent(((DataPerusahaanRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DataPerusahaanRowDeleting != null)) {
                    this.DataPerusahaanRowDeleting(this, new DataPerusahaanRowChangeEvent(((DataPerusahaanRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveDataPerusahaanRow(DataPerusahaanRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                CetakPOSNota ds = new CetakPOSNota();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DataPerusahaanDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class PosNotaRow : global::System.Data.DataRow {
            
            private PosNotaDataTable tablePosNota;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PosNotaRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePosNota = ((PosNotaDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NoNota {
                get {
                    try {
                        return ((string)(this[this.tablePosNota.NoNotaColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NoNota\' in table \'PosNota\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePosNota.NoNotaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NamaSales {
                get {
                    try {
                        return ((string)(this[this.tablePosNota.NamaSalesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NamaSales\' in table \'PosNota\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePosNota.NamaSalesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NamaToko {
                get {
                    try {
                        return ((string)(this[this.tablePosNota.NamaTokoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NamaToko\' in table \'PosNota\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePosNota.NamaTokoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Alamat {
                get {
                    try {
                        return ((string)(this[this.tablePosNota.AlamatColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Alamat\' in table \'PosNota\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePosNota.AlamatColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Kota {
                get {
                    try {
                        return ((string)(this[this.tablePosNota.KotaColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Kota\' in table \'PosNota\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePosNota.KotaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NamaStok {
                get {
                    try {
                        return ((string)(this[this.tablePosNota.NamaStokColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NamaStok\' in table \'PosNota\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePosNota.NamaStokColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string QtyNota {
                get {
                    try {
                        return ((string)(this[this.tablePosNota.QtyNotaColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'QtyNota\' in table \'PosNota\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePosNota.QtyNotaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string HrgJual {
                get {
                    try {
                        return ((string)(this[this.tablePosNota.HrgJualColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'HrgJual\' in table \'PosNota\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePosNota.HrgJualColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TglNota {
                get {
                    try {
                        return ((string)(this[this.tablePosNota.TglNotaColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TglNota\' in table \'PosNota\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePosNota.TglNotaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string jum {
                get {
                    try {
                        return ((string)(this[this.tablePosNota.jumColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'jum\' in table \'PosNota\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePosNota.jumColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string nd1 {
                get {
                    try {
                        return ((string)(this[this.tablePosNota.nd1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'nd1\' in table \'PosNota\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePosNota.nd1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string nd2 {
                get {
                    try {
                        return ((string)(this[this.tablePosNota.nd2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'nd2\' in table \'PosNota\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePosNota.nd2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string nd3 {
                get {
                    try {
                        return ((string)(this[this.tablePosNota.nd3Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'nd3\' in table \'PosNota\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePosNota.nd3Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Pot {
                get {
                    try {
                        return ((string)(this[this.tablePosNota.PotColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Pot\' in table \'PosNota\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePosNota.PotColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SatSolo {
                get {
                    try {
                        return ((string)(this[this.tablePosNota.SatSoloColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SatSolo\' in table \'PosNota\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePosNota.SatSoloColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNoNotaNull() {
                return this.IsNull(this.tablePosNota.NoNotaColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNoNotaNull() {
                this[this.tablePosNota.NoNotaColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNamaSalesNull() {
                return this.IsNull(this.tablePosNota.NamaSalesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNamaSalesNull() {
                this[this.tablePosNota.NamaSalesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNamaTokoNull() {
                return this.IsNull(this.tablePosNota.NamaTokoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNamaTokoNull() {
                this[this.tablePosNota.NamaTokoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAlamatNull() {
                return this.IsNull(this.tablePosNota.AlamatColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAlamatNull() {
                this[this.tablePosNota.AlamatColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsKotaNull() {
                return this.IsNull(this.tablePosNota.KotaColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetKotaNull() {
                this[this.tablePosNota.KotaColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNamaStokNull() {
                return this.IsNull(this.tablePosNota.NamaStokColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNamaStokNull() {
                this[this.tablePosNota.NamaStokColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsQtyNotaNull() {
                return this.IsNull(this.tablePosNota.QtyNotaColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetQtyNotaNull() {
                this[this.tablePosNota.QtyNotaColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHrgJualNull() {
                return this.IsNull(this.tablePosNota.HrgJualColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHrgJualNull() {
                this[this.tablePosNota.HrgJualColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTglNotaNull() {
                return this.IsNull(this.tablePosNota.TglNotaColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTglNotaNull() {
                this[this.tablePosNota.TglNotaColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsjumNull() {
                return this.IsNull(this.tablePosNota.jumColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetjumNull() {
                this[this.tablePosNota.jumColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isnd1Null() {
                return this.IsNull(this.tablePosNota.nd1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setnd1Null() {
                this[this.tablePosNota.nd1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isnd2Null() {
                return this.IsNull(this.tablePosNota.nd2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setnd2Null() {
                this[this.tablePosNota.nd2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isnd3Null() {
                return this.IsNull(this.tablePosNota.nd3Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setnd3Null() {
                this[this.tablePosNota.nd3Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPotNull() {
                return this.IsNull(this.tablePosNota.PotColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPotNull() {
                this[this.tablePosNota.PotColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSatSoloNull() {
                return this.IsNull(this.tablePosNota.SatSoloColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSatSoloNull() {
                this[this.tablePosNota.SatSoloColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class DataPerusahaanRow : global::System.Data.DataRow {
            
            private DataPerusahaanDataTable tableDataPerusahaan;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DataPerusahaanRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableDataPerusahaan = ((DataPerusahaanDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Nama {
                get {
                    try {
                        return ((string)(this[this.tableDataPerusahaan.NamaColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Nama\' in table \'DataPerusahaan\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDataPerusahaan.NamaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Alamat {
                get {
                    try {
                        return ((string)(this[this.tableDataPerusahaan.AlamatColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Alamat\' in table \'DataPerusahaan\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDataPerusahaan.AlamatColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Email {
                get {
                    try {
                        return ((string)(this[this.tableDataPerusahaan.EmailColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Email\' in table \'DataPerusahaan\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDataPerusahaan.EmailColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Fax {
                get {
                    try {
                        return ((string)(this[this.tableDataPerusahaan.FaxColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Fax\' in table \'DataPerusahaan\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDataPerusahaan.FaxColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string KodePos {
                get {
                    try {
                        return ((string)(this[this.tableDataPerusahaan.KodePosColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'KodePos\' in table \'DataPerusahaan\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDataPerusahaan.KodePosColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Kota {
                get {
                    try {
                        return ((string)(this[this.tableDataPerusahaan.KotaColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Kota\' in table \'DataPerusahaan\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDataPerusahaan.KotaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NPWP {
                get {
                    try {
                        return ((string)(this[this.tableDataPerusahaan.NPWPColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NPWP\' in table \'DataPerusahaan\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDataPerusahaan.NPWPColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Propinsi {
                get {
                    try {
                        return ((string)(this[this.tableDataPerusahaan.PropinsiColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Propinsi\' in table \'DataPerusahaan\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDataPerusahaan.PropinsiColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Telp {
                get {
                    try {
                        return ((string)(this[this.tableDataPerusahaan.TelpColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Telp\' in table \'DataPerusahaan\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDataPerusahaan.TelpColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TglPKP {
                get {
                    try {
                        return ((string)(this[this.tableDataPerusahaan.TglPKPColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TglPKP\' in table \'DataPerusahaan\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDataPerusahaan.TglPKPColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNamaNull() {
                return this.IsNull(this.tableDataPerusahaan.NamaColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNamaNull() {
                this[this.tableDataPerusahaan.NamaColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAlamatNull() {
                return this.IsNull(this.tableDataPerusahaan.AlamatColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAlamatNull() {
                this[this.tableDataPerusahaan.AlamatColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmailNull() {
                return this.IsNull(this.tableDataPerusahaan.EmailColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmailNull() {
                this[this.tableDataPerusahaan.EmailColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFaxNull() {
                return this.IsNull(this.tableDataPerusahaan.FaxColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFaxNull() {
                this[this.tableDataPerusahaan.FaxColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsKodePosNull() {
                return this.IsNull(this.tableDataPerusahaan.KodePosColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetKodePosNull() {
                this[this.tableDataPerusahaan.KodePosColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsKotaNull() {
                return this.IsNull(this.tableDataPerusahaan.KotaColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetKotaNull() {
                this[this.tableDataPerusahaan.KotaColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNPWPNull() {
                return this.IsNull(this.tableDataPerusahaan.NPWPColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNPWPNull() {
                this[this.tableDataPerusahaan.NPWPColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPropinsiNull() {
                return this.IsNull(this.tableDataPerusahaan.PropinsiColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPropinsiNull() {
                this[this.tableDataPerusahaan.PropinsiColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTelpNull() {
                return this.IsNull(this.tableDataPerusahaan.TelpColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTelpNull() {
                this[this.tableDataPerusahaan.TelpColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTglPKPNull() {
                return this.IsNull(this.tableDataPerusahaan.TglPKPColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTglPKPNull() {
                this[this.tableDataPerusahaan.TglPKPColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class PosNotaRowChangeEvent : global::System.EventArgs {
            
            private PosNotaRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PosNotaRowChangeEvent(PosNotaRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PosNotaRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class DataPerusahaanRowChangeEvent : global::System.EventArgs {
            
            private DataPerusahaanRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataPerusahaanRowChangeEvent(DataPerusahaanRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataPerusahaanRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591