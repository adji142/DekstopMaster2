//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.8935
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace ISA.Trading.DataTemplates {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("dsKonsolidasi")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class dsKonsolidasi : global::System.Data.DataSet {
        
        private GitNotaDataTable tableGitNota;
        
        private GitAntarGudangDataTable tableGitAntarGudang;
        
        private BonSementaraDataTable tableBonSementara;
        
        private KasOpnameDataTable tableKasOpname;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public dsKonsolidasi() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected dsKonsolidasi(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["GitNota"] != null)) {
                    base.Tables.Add(new GitNotaDataTable(ds.Tables["GitNota"]));
                }
                if ((ds.Tables["GitAntarGudang"] != null)) {
                    base.Tables.Add(new GitAntarGudangDataTable(ds.Tables["GitAntarGudang"]));
                }
                if ((ds.Tables["BonSementara"] != null)) {
                    base.Tables.Add(new BonSementaraDataTable(ds.Tables["BonSementara"]));
                }
                if ((ds.Tables["KasOpname"] != null)) {
                    base.Tables.Add(new KasOpnameDataTable(ds.Tables["KasOpname"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GitNotaDataTable GitNota {
            get {
                return this.tableGitNota;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GitAntarGudangDataTable GitAntarGudang {
            get {
                return this.tableGitAntarGudang;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public BonSementaraDataTable BonSementara {
            get {
                return this.tableBonSementara;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public KasOpnameDataTable KasOpname {
            get {
                return this.tableKasOpname;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            dsKonsolidasi cln = ((dsKonsolidasi)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["GitNota"] != null)) {
                    base.Tables.Add(new GitNotaDataTable(ds.Tables["GitNota"]));
                }
                if ((ds.Tables["GitAntarGudang"] != null)) {
                    base.Tables.Add(new GitAntarGudangDataTable(ds.Tables["GitAntarGudang"]));
                }
                if ((ds.Tables["BonSementara"] != null)) {
                    base.Tables.Add(new BonSementaraDataTable(ds.Tables["BonSementara"]));
                }
                if ((ds.Tables["KasOpname"] != null)) {
                    base.Tables.Add(new KasOpnameDataTable(ds.Tables["KasOpname"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableGitNota = ((GitNotaDataTable)(base.Tables["GitNota"]));
            if ((initTable == true)) {
                if ((this.tableGitNota != null)) {
                    this.tableGitNota.InitVars();
                }
            }
            this.tableGitAntarGudang = ((GitAntarGudangDataTable)(base.Tables["GitAntarGudang"]));
            if ((initTable == true)) {
                if ((this.tableGitAntarGudang != null)) {
                    this.tableGitAntarGudang.InitVars();
                }
            }
            this.tableBonSementara = ((BonSementaraDataTable)(base.Tables["BonSementara"]));
            if ((initTable == true)) {
                if ((this.tableBonSementara != null)) {
                    this.tableBonSementara.InitVars();
                }
            }
            this.tableKasOpname = ((KasOpnameDataTable)(base.Tables["KasOpname"]));
            if ((initTable == true)) {
                if ((this.tableKasOpname != null)) {
                    this.tableKasOpname.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "dsKonsolidasi";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/dsKonsolidasi.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableGitNota = new GitNotaDataTable();
            base.Tables.Add(this.tableGitNota);
            this.tableGitAntarGudang = new GitAntarGudangDataTable();
            base.Tables.Add(this.tableGitAntarGudang);
            this.tableBonSementara = new BonSementaraDataTable();
            base.Tables.Add(this.tableBonSementara);
            this.tableKasOpname = new KasOpnameDataTable();
            base.Tables.Add(this.tableKasOpname);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeGitNota() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeGitAntarGudang() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeBonSementara() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeKasOpname() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            dsKonsolidasi ds = new dsKonsolidasi();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void GitNotaRowChangeEventHandler(object sender, GitNotaRowChangeEvent e);
        
        public delegate void GitAntarGudangRowChangeEventHandler(object sender, GitAntarGudangRowChangeEvent e);
        
        public delegate void BonSementaraRowChangeEventHandler(object sender, BonSementaraRowChangeEvent e);
        
        public delegate void KasOpnameRowChangeEventHandler(object sender, KasOpnameRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GitNotaDataTable : global::System.Data.TypedTableBase<GitNotaRow> {
            
            private global::System.Data.DataColumn columnCabangID;
            
            private global::System.Data.DataColumn columnJumlahRecord;
            
            private global::System.Data.DataColumn columnNomNota;
            
            private global::System.Data.DataColumn columnAverage;
            
            private global::System.Data.DataColumn columnGitMax;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GitNotaDataTable() {
                this.TableName = "GitNota";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GitNotaDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected GitNotaDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CabangIDColumn {
                get {
                    return this.columnCabangID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn JumlahRecordColumn {
                get {
                    return this.columnJumlahRecord;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NomNotaColumn {
                get {
                    return this.columnNomNota;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AverageColumn {
                get {
                    return this.columnAverage;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GitMaxColumn {
                get {
                    return this.columnGitMax;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GitNotaRow this[int index] {
                get {
                    return ((GitNotaRow)(this.Rows[index]));
                }
            }
            
            public event GitNotaRowChangeEventHandler GitNotaRowChanging;
            
            public event GitNotaRowChangeEventHandler GitNotaRowChanged;
            
            public event GitNotaRowChangeEventHandler GitNotaRowDeleting;
            
            public event GitNotaRowChangeEventHandler GitNotaRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddGitNotaRow(GitNotaRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GitNotaRow AddGitNotaRow(string CabangID, int JumlahRecord, double NomNota, double Average, double GitMax) {
                GitNotaRow rowGitNotaRow = ((GitNotaRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        CabangID,
                        JumlahRecord,
                        NomNota,
                        Average,
                        GitMax};
                rowGitNotaRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowGitNotaRow);
                return rowGitNotaRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                GitNotaDataTable cln = ((GitNotaDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new GitNotaDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCabangID = base.Columns["CabangID"];
                this.columnJumlahRecord = base.Columns["JumlahRecord"];
                this.columnNomNota = base.Columns["NomNota"];
                this.columnAverage = base.Columns["Average"];
                this.columnGitMax = base.Columns["GitMax"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCabangID = new global::System.Data.DataColumn("CabangID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCabangID);
                this.columnJumlahRecord = new global::System.Data.DataColumn("JumlahRecord", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnJumlahRecord);
                this.columnNomNota = new global::System.Data.DataColumn("NomNota", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNomNota);
                this.columnAverage = new global::System.Data.DataColumn("Average", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAverage);
                this.columnGitMax = new global::System.Data.DataColumn("GitMax", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGitMax);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GitNotaRow NewGitNotaRow() {
                return ((GitNotaRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new GitNotaRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(GitNotaRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GitNotaRowChanged != null)) {
                    this.GitNotaRowChanged(this, new GitNotaRowChangeEvent(((GitNotaRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GitNotaRowChanging != null)) {
                    this.GitNotaRowChanging(this, new GitNotaRowChangeEvent(((GitNotaRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GitNotaRowDeleted != null)) {
                    this.GitNotaRowDeleted(this, new GitNotaRowChangeEvent(((GitNotaRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GitNotaRowDeleting != null)) {
                    this.GitNotaRowDeleting(this, new GitNotaRowChangeEvent(((GitNotaRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveGitNotaRow(GitNotaRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dsKonsolidasi ds = new dsKonsolidasi();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GitNotaDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GitAntarGudangDataTable : global::System.Data.TypedTableBase<GitAntarGudangRow> {
            
            private global::System.Data.DataColumn columnKodeGudang;
            
            private global::System.Data.DataColumn columnJmlRecords;
            
            private global::System.Data.DataColumn columnTtlNominal;
            
            private global::System.Data.DataColumn columnMaxGIT;
            
            private global::System.Data.DataColumn columnAvgGIT;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GitAntarGudangDataTable() {
                this.TableName = "GitAntarGudang";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GitAntarGudangDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected GitAntarGudangDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn KodeGudangColumn {
                get {
                    return this.columnKodeGudang;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn JmlRecordsColumn {
                get {
                    return this.columnJmlRecords;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TtlNominalColumn {
                get {
                    return this.columnTtlNominal;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MaxGITColumn {
                get {
                    return this.columnMaxGIT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AvgGITColumn {
                get {
                    return this.columnAvgGIT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GitAntarGudangRow this[int index] {
                get {
                    return ((GitAntarGudangRow)(this.Rows[index]));
                }
            }
            
            public event GitAntarGudangRowChangeEventHandler GitAntarGudangRowChanging;
            
            public event GitAntarGudangRowChangeEventHandler GitAntarGudangRowChanged;
            
            public event GitAntarGudangRowChangeEventHandler GitAntarGudangRowDeleting;
            
            public event GitAntarGudangRowChangeEventHandler GitAntarGudangRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddGitAntarGudangRow(GitAntarGudangRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GitAntarGudangRow AddGitAntarGudangRow(string KodeGudang, int JmlRecords, double TtlNominal, double MaxGIT, double AvgGIT) {
                GitAntarGudangRow rowGitAntarGudangRow = ((GitAntarGudangRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        KodeGudang,
                        JmlRecords,
                        TtlNominal,
                        MaxGIT,
                        AvgGIT};
                rowGitAntarGudangRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowGitAntarGudangRow);
                return rowGitAntarGudangRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                GitAntarGudangDataTable cln = ((GitAntarGudangDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new GitAntarGudangDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnKodeGudang = base.Columns["KodeGudang"];
                this.columnJmlRecords = base.Columns["JmlRecords"];
                this.columnTtlNominal = base.Columns["TtlNominal"];
                this.columnMaxGIT = base.Columns["MaxGIT"];
                this.columnAvgGIT = base.Columns["AvgGIT"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnKodeGudang = new global::System.Data.DataColumn("KodeGudang", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnKodeGudang);
                this.columnJmlRecords = new global::System.Data.DataColumn("JmlRecords", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnJmlRecords);
                this.columnTtlNominal = new global::System.Data.DataColumn("TtlNominal", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTtlNominal);
                this.columnMaxGIT = new global::System.Data.DataColumn("MaxGIT", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMaxGIT);
                this.columnAvgGIT = new global::System.Data.DataColumn("AvgGIT", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAvgGIT);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GitAntarGudangRow NewGitAntarGudangRow() {
                return ((GitAntarGudangRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new GitAntarGudangRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(GitAntarGudangRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GitAntarGudangRowChanged != null)) {
                    this.GitAntarGudangRowChanged(this, new GitAntarGudangRowChangeEvent(((GitAntarGudangRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GitAntarGudangRowChanging != null)) {
                    this.GitAntarGudangRowChanging(this, new GitAntarGudangRowChangeEvent(((GitAntarGudangRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GitAntarGudangRowDeleted != null)) {
                    this.GitAntarGudangRowDeleted(this, new GitAntarGudangRowChangeEvent(((GitAntarGudangRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GitAntarGudangRowDeleting != null)) {
                    this.GitAntarGudangRowDeleting(this, new GitAntarGudangRowChangeEvent(((GitAntarGudangRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveGitAntarGudangRow(GitAntarGudangRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dsKonsolidasi ds = new dsKonsolidasi();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GitAntarGudangDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class BonSementaraDataTable : global::System.Data.TypedTableBase<BonSementaraRow> {
            
            private global::System.Data.DataColumn columnKodeGudang;
            
            private global::System.Data.DataColumn columnJmlRecords;
            
            private global::System.Data.DataColumn columnTtlNominal;
            
            private global::System.Data.DataColumn columnAvgBS;
            
            private global::System.Data.DataColumn columnMaxBS;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BonSementaraDataTable() {
                this.TableName = "BonSementara";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal BonSementaraDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected BonSementaraDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn KodeGudangColumn {
                get {
                    return this.columnKodeGudang;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn JmlRecordsColumn {
                get {
                    return this.columnJmlRecords;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TtlNominalColumn {
                get {
                    return this.columnTtlNominal;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AvgBSColumn {
                get {
                    return this.columnAvgBS;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MaxBSColumn {
                get {
                    return this.columnMaxBS;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BonSementaraRow this[int index] {
                get {
                    return ((BonSementaraRow)(this.Rows[index]));
                }
            }
            
            public event BonSementaraRowChangeEventHandler BonSementaraRowChanging;
            
            public event BonSementaraRowChangeEventHandler BonSementaraRowChanged;
            
            public event BonSementaraRowChangeEventHandler BonSementaraRowDeleting;
            
            public event BonSementaraRowChangeEventHandler BonSementaraRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddBonSementaraRow(BonSementaraRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BonSementaraRow AddBonSementaraRow(string KodeGudang, int JmlRecords, double TtlNominal, double AvgBS, double MaxBS) {
                BonSementaraRow rowBonSementaraRow = ((BonSementaraRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        KodeGudang,
                        JmlRecords,
                        TtlNominal,
                        AvgBS,
                        MaxBS};
                rowBonSementaraRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowBonSementaraRow);
                return rowBonSementaraRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                BonSementaraDataTable cln = ((BonSementaraDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new BonSementaraDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnKodeGudang = base.Columns["KodeGudang"];
                this.columnJmlRecords = base.Columns["JmlRecords"];
                this.columnTtlNominal = base.Columns["TtlNominal"];
                this.columnAvgBS = base.Columns["AvgBS"];
                this.columnMaxBS = base.Columns["MaxBS"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnKodeGudang = new global::System.Data.DataColumn("KodeGudang", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnKodeGudang);
                this.columnJmlRecords = new global::System.Data.DataColumn("JmlRecords", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnJmlRecords);
                this.columnTtlNominal = new global::System.Data.DataColumn("TtlNominal", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTtlNominal);
                this.columnAvgBS = new global::System.Data.DataColumn("AvgBS", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAvgBS);
                this.columnMaxBS = new global::System.Data.DataColumn("MaxBS", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMaxBS);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BonSementaraRow NewBonSementaraRow() {
                return ((BonSementaraRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new BonSementaraRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(BonSementaraRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.BonSementaraRowChanged != null)) {
                    this.BonSementaraRowChanged(this, new BonSementaraRowChangeEvent(((BonSementaraRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.BonSementaraRowChanging != null)) {
                    this.BonSementaraRowChanging(this, new BonSementaraRowChangeEvent(((BonSementaraRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.BonSementaraRowDeleted != null)) {
                    this.BonSementaraRowDeleted(this, new BonSementaraRowChangeEvent(((BonSementaraRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.BonSementaraRowDeleting != null)) {
                    this.BonSementaraRowDeleting(this, new BonSementaraRowChangeEvent(((BonSementaraRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveBonSementaraRow(BonSementaraRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dsKonsolidasi ds = new dsKonsolidasi();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "BonSementaraDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class KasOpnameDataTable : global::System.Data.TypedTableBase<KasOpnameRow> {
            
            private global::System.Data.DataColumn columnKodeGudang;
            
            private global::System.Data.DataColumn columnTanggal;
            
            private global::System.Data.DataColumn columnKasTunai;
            
            private global::System.Data.DataColumn columnKasLemBGC;
            
            private global::System.Data.DataColumn columnKasNomBGC;
            
            private global::System.Data.DataColumn columnOpnTunai;
            
            private global::System.Data.DataColumn columnOpnLemBGC;
            
            private global::System.Data.DataColumn columnOpnNomBGC;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public KasOpnameDataTable() {
                this.TableName = "KasOpname";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal KasOpnameDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected KasOpnameDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn KodeGudangColumn {
                get {
                    return this.columnKodeGudang;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TanggalColumn {
                get {
                    return this.columnTanggal;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn KasTunaiColumn {
                get {
                    return this.columnKasTunai;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn KasLemBGCColumn {
                get {
                    return this.columnKasLemBGC;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn KasNomBGCColumn {
                get {
                    return this.columnKasNomBGC;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OpnTunaiColumn {
                get {
                    return this.columnOpnTunai;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OpnLemBGCColumn {
                get {
                    return this.columnOpnLemBGC;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OpnNomBGCColumn {
                get {
                    return this.columnOpnNomBGC;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public KasOpnameRow this[int index] {
                get {
                    return ((KasOpnameRow)(this.Rows[index]));
                }
            }
            
            public event KasOpnameRowChangeEventHandler KasOpnameRowChanging;
            
            public event KasOpnameRowChangeEventHandler KasOpnameRowChanged;
            
            public event KasOpnameRowChangeEventHandler KasOpnameRowDeleting;
            
            public event KasOpnameRowChangeEventHandler KasOpnameRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddKasOpnameRow(KasOpnameRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public KasOpnameRow AddKasOpnameRow(string KodeGudang, string Tanggal, string KasTunai, string KasLemBGC, string KasNomBGC, string OpnTunai, string OpnLemBGC, string OpnNomBGC) {
                KasOpnameRow rowKasOpnameRow = ((KasOpnameRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        KodeGudang,
                        Tanggal,
                        KasTunai,
                        KasLemBGC,
                        KasNomBGC,
                        OpnTunai,
                        OpnLemBGC,
                        OpnNomBGC};
                rowKasOpnameRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowKasOpnameRow);
                return rowKasOpnameRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                KasOpnameDataTable cln = ((KasOpnameDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new KasOpnameDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnKodeGudang = base.Columns["KodeGudang"];
                this.columnTanggal = base.Columns["Tanggal"];
                this.columnKasTunai = base.Columns["KasTunai"];
                this.columnKasLemBGC = base.Columns["KasLemBGC"];
                this.columnKasNomBGC = base.Columns["KasNomBGC"];
                this.columnOpnTunai = base.Columns["OpnTunai"];
                this.columnOpnLemBGC = base.Columns["OpnLemBGC"];
                this.columnOpnNomBGC = base.Columns["OpnNomBGC"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnKodeGudang = new global::System.Data.DataColumn("KodeGudang", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnKodeGudang);
                this.columnTanggal = new global::System.Data.DataColumn("Tanggal", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTanggal);
                this.columnKasTunai = new global::System.Data.DataColumn("KasTunai", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnKasTunai);
                this.columnKasLemBGC = new global::System.Data.DataColumn("KasLemBGC", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnKasLemBGC);
                this.columnKasNomBGC = new global::System.Data.DataColumn("KasNomBGC", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnKasNomBGC);
                this.columnOpnTunai = new global::System.Data.DataColumn("OpnTunai", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOpnTunai);
                this.columnOpnLemBGC = new global::System.Data.DataColumn("OpnLemBGC", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOpnLemBGC);
                this.columnOpnNomBGC = new global::System.Data.DataColumn("OpnNomBGC", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOpnNomBGC);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public KasOpnameRow NewKasOpnameRow() {
                return ((KasOpnameRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new KasOpnameRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(KasOpnameRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.KasOpnameRowChanged != null)) {
                    this.KasOpnameRowChanged(this, new KasOpnameRowChangeEvent(((KasOpnameRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.KasOpnameRowChanging != null)) {
                    this.KasOpnameRowChanging(this, new KasOpnameRowChangeEvent(((KasOpnameRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.KasOpnameRowDeleted != null)) {
                    this.KasOpnameRowDeleted(this, new KasOpnameRowChangeEvent(((KasOpnameRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.KasOpnameRowDeleting != null)) {
                    this.KasOpnameRowDeleting(this, new KasOpnameRowChangeEvent(((KasOpnameRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveKasOpnameRow(KasOpnameRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dsKonsolidasi ds = new dsKonsolidasi();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "KasOpnameDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class GitNotaRow : global::System.Data.DataRow {
            
            private GitNotaDataTable tableGitNota;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GitNotaRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGitNota = ((GitNotaDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CabangID {
                get {
                    try {
                        return ((string)(this[this.tableGitNota.CabangIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CabangID\' in table \'GitNota\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGitNota.CabangIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int JumlahRecord {
                get {
                    try {
                        return ((int)(this[this.tableGitNota.JumlahRecordColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'JumlahRecord\' in table \'GitNota\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGitNota.JumlahRecordColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double NomNota {
                get {
                    try {
                        return ((double)(this[this.tableGitNota.NomNotaColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NomNota\' in table \'GitNota\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGitNota.NomNotaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Average {
                get {
                    try {
                        return ((double)(this[this.tableGitNota.AverageColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Average\' in table \'GitNota\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGitNota.AverageColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double GitMax {
                get {
                    try {
                        return ((double)(this[this.tableGitNota.GitMaxColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GitMax\' in table \'GitNota\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGitNota.GitMaxColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCabangIDNull() {
                return this.IsNull(this.tableGitNota.CabangIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCabangIDNull() {
                this[this.tableGitNota.CabangIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsJumlahRecordNull() {
                return this.IsNull(this.tableGitNota.JumlahRecordColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetJumlahRecordNull() {
                this[this.tableGitNota.JumlahRecordColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNomNotaNull() {
                return this.IsNull(this.tableGitNota.NomNotaColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNomNotaNull() {
                this[this.tableGitNota.NomNotaColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAverageNull() {
                return this.IsNull(this.tableGitNota.AverageColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAverageNull() {
                this[this.tableGitNota.AverageColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGitMaxNull() {
                return this.IsNull(this.tableGitNota.GitMaxColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGitMaxNull() {
                this[this.tableGitNota.GitMaxColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class GitAntarGudangRow : global::System.Data.DataRow {
            
            private GitAntarGudangDataTable tableGitAntarGudang;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GitAntarGudangRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGitAntarGudang = ((GitAntarGudangDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string KodeGudang {
                get {
                    try {
                        return ((string)(this[this.tableGitAntarGudang.KodeGudangColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'KodeGudang\' in table \'GitAntarGudang\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGitAntarGudang.KodeGudangColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int JmlRecords {
                get {
                    try {
                        return ((int)(this[this.tableGitAntarGudang.JmlRecordsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'JmlRecords\' in table \'GitAntarGudang\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGitAntarGudang.JmlRecordsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double TtlNominal {
                get {
                    try {
                        return ((double)(this[this.tableGitAntarGudang.TtlNominalColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TtlNominal\' in table \'GitAntarGudang\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGitAntarGudang.TtlNominalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double MaxGIT {
                get {
                    try {
                        return ((double)(this[this.tableGitAntarGudang.MaxGITColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MaxGIT\' in table \'GitAntarGudang\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGitAntarGudang.MaxGITColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double AvgGIT {
                get {
                    try {
                        return ((double)(this[this.tableGitAntarGudang.AvgGITColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AvgGIT\' in table \'GitAntarGudang\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGitAntarGudang.AvgGITColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsKodeGudangNull() {
                return this.IsNull(this.tableGitAntarGudang.KodeGudangColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetKodeGudangNull() {
                this[this.tableGitAntarGudang.KodeGudangColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsJmlRecordsNull() {
                return this.IsNull(this.tableGitAntarGudang.JmlRecordsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetJmlRecordsNull() {
                this[this.tableGitAntarGudang.JmlRecordsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTtlNominalNull() {
                return this.IsNull(this.tableGitAntarGudang.TtlNominalColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTtlNominalNull() {
                this[this.tableGitAntarGudang.TtlNominalColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMaxGITNull() {
                return this.IsNull(this.tableGitAntarGudang.MaxGITColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMaxGITNull() {
                this[this.tableGitAntarGudang.MaxGITColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAvgGITNull() {
                return this.IsNull(this.tableGitAntarGudang.AvgGITColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAvgGITNull() {
                this[this.tableGitAntarGudang.AvgGITColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class BonSementaraRow : global::System.Data.DataRow {
            
            private BonSementaraDataTable tableBonSementara;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal BonSementaraRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableBonSementara = ((BonSementaraDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string KodeGudang {
                get {
                    try {
                        return ((string)(this[this.tableBonSementara.KodeGudangColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'KodeGudang\' in table \'BonSementara\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBonSementara.KodeGudangColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int JmlRecords {
                get {
                    try {
                        return ((int)(this[this.tableBonSementara.JmlRecordsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'JmlRecords\' in table \'BonSementara\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBonSementara.JmlRecordsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double TtlNominal {
                get {
                    try {
                        return ((double)(this[this.tableBonSementara.TtlNominalColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TtlNominal\' in table \'BonSementara\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBonSementara.TtlNominalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double AvgBS {
                get {
                    try {
                        return ((double)(this[this.tableBonSementara.AvgBSColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AvgBS\' in table \'BonSementara\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBonSementara.AvgBSColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double MaxBS {
                get {
                    try {
                        return ((double)(this[this.tableBonSementara.MaxBSColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MaxBS\' in table \'BonSementara\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBonSementara.MaxBSColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsKodeGudangNull() {
                return this.IsNull(this.tableBonSementara.KodeGudangColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetKodeGudangNull() {
                this[this.tableBonSementara.KodeGudangColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsJmlRecordsNull() {
                return this.IsNull(this.tableBonSementara.JmlRecordsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetJmlRecordsNull() {
                this[this.tableBonSementara.JmlRecordsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTtlNominalNull() {
                return this.IsNull(this.tableBonSementara.TtlNominalColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTtlNominalNull() {
                this[this.tableBonSementara.TtlNominalColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAvgBSNull() {
                return this.IsNull(this.tableBonSementara.AvgBSColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAvgBSNull() {
                this[this.tableBonSementara.AvgBSColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMaxBSNull() {
                return this.IsNull(this.tableBonSementara.MaxBSColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMaxBSNull() {
                this[this.tableBonSementara.MaxBSColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class KasOpnameRow : global::System.Data.DataRow {
            
            private KasOpnameDataTable tableKasOpname;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal KasOpnameRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableKasOpname = ((KasOpnameDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string KodeGudang {
                get {
                    try {
                        return ((string)(this[this.tableKasOpname.KodeGudangColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'KodeGudang\' in table \'KasOpname\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableKasOpname.KodeGudangColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Tanggal {
                get {
                    try {
                        return ((string)(this[this.tableKasOpname.TanggalColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Tanggal\' in table \'KasOpname\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableKasOpname.TanggalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string KasTunai {
                get {
                    try {
                        return ((string)(this[this.tableKasOpname.KasTunaiColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'KasTunai\' in table \'KasOpname\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableKasOpname.KasTunaiColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string KasLemBGC {
                get {
                    try {
                        return ((string)(this[this.tableKasOpname.KasLemBGCColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'KasLemBGC\' in table \'KasOpname\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableKasOpname.KasLemBGCColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string KasNomBGC {
                get {
                    try {
                        return ((string)(this[this.tableKasOpname.KasNomBGCColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'KasNomBGC\' in table \'KasOpname\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableKasOpname.KasNomBGCColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OpnTunai {
                get {
                    try {
                        return ((string)(this[this.tableKasOpname.OpnTunaiColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OpnTunai\' in table \'KasOpname\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableKasOpname.OpnTunaiColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OpnLemBGC {
                get {
                    try {
                        return ((string)(this[this.tableKasOpname.OpnLemBGCColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OpnLemBGC\' in table \'KasOpname\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableKasOpname.OpnLemBGCColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OpnNomBGC {
                get {
                    try {
                        return ((string)(this[this.tableKasOpname.OpnNomBGCColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OpnNomBGC\' in table \'KasOpname\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableKasOpname.OpnNomBGCColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsKodeGudangNull() {
                return this.IsNull(this.tableKasOpname.KodeGudangColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetKodeGudangNull() {
                this[this.tableKasOpname.KodeGudangColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTanggalNull() {
                return this.IsNull(this.tableKasOpname.TanggalColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTanggalNull() {
                this[this.tableKasOpname.TanggalColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsKasTunaiNull() {
                return this.IsNull(this.tableKasOpname.KasTunaiColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetKasTunaiNull() {
                this[this.tableKasOpname.KasTunaiColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsKasLemBGCNull() {
                return this.IsNull(this.tableKasOpname.KasLemBGCColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetKasLemBGCNull() {
                this[this.tableKasOpname.KasLemBGCColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsKasNomBGCNull() {
                return this.IsNull(this.tableKasOpname.KasNomBGCColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetKasNomBGCNull() {
                this[this.tableKasOpname.KasNomBGCColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOpnTunaiNull() {
                return this.IsNull(this.tableKasOpname.OpnTunaiColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOpnTunaiNull() {
                this[this.tableKasOpname.OpnTunaiColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOpnLemBGCNull() {
                return this.IsNull(this.tableKasOpname.OpnLemBGCColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOpnLemBGCNull() {
                this[this.tableKasOpname.OpnLemBGCColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOpnNomBGCNull() {
                return this.IsNull(this.tableKasOpname.OpnNomBGCColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOpnNomBGCNull() {
                this[this.tableKasOpname.OpnNomBGCColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class GitNotaRowChangeEvent : global::System.EventArgs {
            
            private GitNotaRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GitNotaRowChangeEvent(GitNotaRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GitNotaRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class GitAntarGudangRowChangeEvent : global::System.EventArgs {
            
            private GitAntarGudangRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GitAntarGudangRowChangeEvent(GitAntarGudangRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GitAntarGudangRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class BonSementaraRowChangeEvent : global::System.EventArgs {
            
            private BonSementaraRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BonSementaraRowChangeEvent(BonSementaraRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BonSementaraRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class KasOpnameRowChangeEvent : global::System.EventArgs {
            
            private KasOpnameRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public KasOpnameRowChangeEvent(KasOpnameRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public KasOpnameRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591